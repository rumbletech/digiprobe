
DigiProbe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001890  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800199c  0800199c  0001199c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019ac  080019ac  000119bc  2**0
                  CONTENTS
  4 .ARM          00000000  080019ac  080019ac  000119bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080019ac  080019bc  000119bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080019ac  080019ac  000119ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019b8  080019b8  000119b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000119bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  080019bc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  080019bc  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000119bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000080f3  00000000  00000000  000119e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001545  00000000  00000000  00019ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000270  00000000  00000000  0001b020  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001f8  00000000  00000000  0001b290  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013431  00000000  00000000  0001b488  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000045b8  00000000  00000000  0002e8b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005ec4c  00000000  00000000  00032e71  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00091abd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000007f4  00000000  00000000  00091b38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08001984 	.word	0x08001984

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08001984 	.word	0x08001984

0800014c <NMI_Handler>:
#ifdef __cplusplus
extern "C" {
#endif

void NMI_Handler(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0

}
 8000150:	bf00      	nop
 8000152:	46bd      	mov	sp, r7
 8000154:	bc80      	pop	{r7}
 8000156:	4770      	bx	lr

08000158 <HardFault_Handler>:


void HardFault_Handler(void)
{
 8000158:	b480      	push	{r7}
 800015a:	af00      	add	r7, sp, #0

  while (1)
 800015c:	e7fe      	b.n	800015c <HardFault_Handler+0x4>

0800015e <MemManage_Handler>:
  }
}


void MemManage_Handler(void)
{
 800015e:	b480      	push	{r7}
 8000160:	af00      	add	r7, sp, #0

  while (1)
 8000162:	e7fe      	b.n	8000162 <MemManage_Handler+0x4>

08000164 <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 8000164:	b480      	push	{r7}
 8000166:	af00      	add	r7, sp, #0

  while (1)
 8000168:	e7fe      	b.n	8000168 <BusFault_Handler+0x4>

0800016a <UsageFault_Handler>:

  }
}

void UsageFault_Handler(void)
{
 800016a:	b480      	push	{r7}
 800016c:	af00      	add	r7, sp, #0

  while (1)
 800016e:	e7fe      	b.n	800016e <UsageFault_Handler+0x4>

08000170 <SVC_Handler>:
  }
}


void SVC_Handler(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

}
 8000174:	bf00      	nop
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr

0800017c <DebugMon_Handler>:


void DebugMon_Handler(void)
{
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0

}
 8000180:	bf00      	nop
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr

08000188 <PendSV_Handler>:


void PendSV_Handler(void)
{
 8000188:	b480      	push	{r7}
 800018a:	af00      	add	r7, sp, #0

}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr

08000194 <WWDG_IRQHandler>:

void WWDG_IRQHandler( void )
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	while(1)
 8000198:	e7fe      	b.n	8000198 <WWDG_IRQHandler+0x4>

0800019a <FLASH_IRQHandler>:

	}
}

void FLASH_IRQHandler ( void )
{
 800019a:	b480      	push	{r7}
 800019c:	af00      	add	r7, sp, #0

while(1)
 800019e:	e7fe      	b.n	800019e <FLASH_IRQHandler+0x4>

080001a0 <_ZN6Ct_RCC9getSYSCLKEv>:
	/* SYS */
	inline uint32_t getSYSTCLK  ( void ) { return systick.getFreq() ; }
	inline uint32_t getMCOCLK   ( void ) { return MCO_clk   ; }
	inline uint32_t getRTCCLK   ( void ) { return RTC_clk   ; }
	inline uint32_t getPLLCLK   ( void ) { return PLL_clk   ; }
	inline uint32_t getSYSCLK   ( void ) { return H_clk     ; }
 80001a0:	b480      	push	{r7}
 80001a2:	b083      	sub	sp, #12
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	691b      	ldr	r3, [r3, #16]
 80001ac:	4618      	mov	r0, r3
 80001ae:	370c      	adds	r7, #12
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bc80      	pop	{r7}
 80001b4:	4770      	bx	lr
	...

080001b8 <_ZN6Ct_RCC11enableGPIOCEv>:
	inline void disableGPIOB( void ) { RCC->APB2ENR &= ~( RCC_APB2ENR_IOPBEN_Msk ); }
	inline void resetGPIOB( void ) { RCC->APB2RSTR |= ( RCC_APB2RSTR_IOPBRST_Msk ); }
#endif
#if defined(RCC_APB2ENR_IOPCEN_Msk)
	inline uint32_t getGPIOCCLK ( void ) { return APB2_clk ; }
	inline void enableGPIOC( void ) { RCC->APB2ENR |= ( RCC_APB2ENR_IOPCEN_Msk ); }
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
 80001c0:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <_ZN6Ct_RCC11enableGPIOCEv+0x20>)
 80001c2:	699b      	ldr	r3, [r3, #24]
 80001c4:	4a04      	ldr	r2, [pc, #16]	; (80001d8 <_ZN6Ct_RCC11enableGPIOCEv+0x20>)
 80001c6:	f043 0310 	orr.w	r3, r3, #16
 80001ca:	6193      	str	r3, [r2, #24]
 80001cc:	bf00      	nop
 80001ce:	370c      	adds	r7, #12
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	40021000 	.word	0x40021000

080001dc <_ZN6Ct_RCC9enableUSBEv>:
	inline void disableI2S3( void ) { RCC->APB1ENR &= ~( RCC_APB1ENR_I2S3EN_Msk ) ;}
	inline void resetI2S3( void ) { RCC->APB1RSTR |= ( RCC_APB1RSTR_I2S3RST_Msk ) ;}
#endif
#if defined(RCC_APB1ENR_USBEN_Msk)
	inline uint32_t getUSBCLK   ( void ) { return USB_clk   ; }
	inline void enableUSB( void ) { RCC->APB1ENR |= ( RCC_APB1ENR_USBEN_Msk ) ;}
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 80001e4:	4b05      	ldr	r3, [pc, #20]	; (80001fc <_ZN6Ct_RCC9enableUSBEv+0x20>)
 80001e6:	69db      	ldr	r3, [r3, #28]
 80001e8:	4a04      	ldr	r2, [pc, #16]	; (80001fc <_ZN6Ct_RCC9enableUSBEv+0x20>)
 80001ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80001ee:	61d3      	str	r3, [r2, #28]
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	40021000 	.word	0x40021000

08000200 <main>:
#include "main.h"
#include <stdint.h>
#include <DP_USB.h>

int main(void)
{
 8000200:	b590      	push	{r4, r7, lr}
 8000202:	b0b1      	sub	sp, #196	; 0xc4
 8000204:	af00      	add	r7, sp, #0
	Ct_RCC sysctl( BLUEPILL_CONFIG ) ;
 8000206:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800020a:	2101      	movs	r1, #1
 800020c:	4618      	mov	r0, r3
 800020e:	f000 f8f7 	bl	8000400 <_ZN6Ct_RCCC1Em>

	if ( sysctl.Update() != 1 )
 8000212:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000216:	4618      	mov	r0, r3
 8000218:	f000 f96c 	bl	80004f4 <_ZN6Ct_RCC6UpdateEv>
 800021c:	4603      	mov	r3, r0
 800021e:	2b01      	cmp	r3, #1
 8000220:	bf14      	ite	ne
 8000222:	2301      	movne	r3, #1
 8000224:	2300      	moveq	r3, #0
 8000226:	b2db      	uxtb	r3, r3
 8000228:	2b00      	cmp	r3, #0
 800022a:	d000      	beq.n	800022e <main+0x2e>
	{
		while(1)
 800022c:	e7fe      	b.n	800022c <main+0x2c>
		{
			//BREAK;
		}
	}
	sysctl.enableUSB();
 800022e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000232:	4618      	mov	r0, r3
 8000234:	f7ff ffd2 	bl	80001dc <_ZN6Ct_RCC9enableUSBEv>
	sysctl.enableGPIOC();
 8000238:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800023c:	4618      	mov	r0, r3
 800023e:	f7ff ffbb 	bl	80001b8 <_ZN6Ct_RCC11enableGPIOCEv>

	EP_Config_S my_ep ;
 8000242:	f107 0310 	add.w	r3, r7, #16
 8000246:	4618      	mov	r0, r3
 8000248:	f001 f9c8 	bl	80015dc <_ZN11EP_Config_SC1Ev>
	my_ep.EP_Addr = 0x12 ;
 800024c:	2312      	movs	r3, #18
 800024e:	763b      	strb	r3, [r7, #24]
	my_ep.EP_BT = EP_bufftype_E::EP_SINGLE_BUFF ;
 8000250:	2301      	movs	r3, #1
 8000252:	767b      	strb	r3, [r7, #25]
	my_ep.EP_RX0_BSize = 32 ;
 8000254:	2320      	movs	r3, #32
 8000256:	627b      	str	r3, [r7, #36]	; 0x24
	my_ep.EP_TX0_BSize = 24 ;
 8000258:	2318      	movs	r3, #24
 800025a:	623b      	str	r3, [r7, #32]
	my_ep.EP_BT = EP_bufftype_E::EP_SINGLE_BUFF ;
 800025c:	2301      	movs	r3, #1
 800025e:	767b      	strb	r3, [r7, #25]
	my_ep.EP_Type= EP_type_E::EP_TYPE_INT ;
 8000260:	2303      	movs	r3, #3
 8000262:	743b      	strb	r3, [r7, #16]
	my_ep.EP_Dir = EP_dir_E::EP_DIR_BID ;
 8000264:	2302      	movs	r3, #2
 8000266:	747b      	strb	r3, [r7, #17]
	my_ep.EP_Num = 2 ;
 8000268:	2302      	movs	r3, #2
 800026a:	617b      	str	r3, [r7, #20]
	my_ep.EP_Reg = nullptr ;
 800026c:	2300      	movs	r3, #0
 800026e:	633b      	str	r3, [r7, #48]	; 0x30

	if ( my_ep.allocate() == -1 ){
 8000270:	f107 0310 	add.w	r3, r7, #16
 8000274:	4618      	mov	r0, r3
 8000276:	f001 f9e1 	bl	800163c <_ZN11EP_Config_S8allocateEv>
 800027a:	4603      	mov	r3, r0
 800027c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000280:	bf0c      	ite	eq
 8000282:	2301      	moveq	r3, #1
 8000284:	2300      	movne	r3, #0
 8000286:	b2db      	uxtb	r3, r3
 8000288:	2b00      	cmp	r3, #0
 800028a:	d000      	beq.n	800028e <main+0x8e>
		while(1);
 800028c:	e7fe      	b.n	800028c <main+0x8c>
	}

	uint8_t tx_array[13] = { 1 , 2, 3 , 4, 5 , 6 ,7 ,8 ,9 ,10 , 11 , 12 , 13 };
 800028e:	4b26      	ldr	r3, [pc, #152]	; (8000328 <main+0x128>)
 8000290:	463c      	mov	r4, r7
 8000292:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000294:	c407      	stmia	r4!, {r0, r1, r2}
 8000296:	7023      	strb	r3, [r4, #0]

	my_ep.writeTXBuff(tx_array, 13);
 8000298:	4639      	mov	r1, r7
 800029a:	f107 0310 	add.w	r3, r7, #16
 800029e:	220d      	movs	r2, #13
 80002a0:	4618      	mov	r0, r3
 80002a2:	f001 fabb 	bl	800181c <_ZN11EP_Config_S11writeTXBuffEPht>

	uint8_t value ;

	for ( int i = 0 ; i < 13 ; i++ ){
 80002a6:	2300      	movs	r3, #0
 80002a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80002ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80002b0:	2b0c      	cmp	r3, #12
 80002b2:	dc12      	bgt.n	80002da <main+0xda>
		value = pma.read_b( my_ep.EP_TX0_Ptr + i );
 80002b4:	8bba      	ldrh	r2, [r7, #28]
 80002b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80002ba:	b29b      	uxth	r3, r3
 80002bc:	4413      	add	r3, r2
 80002be:	b29b      	uxth	r3, r3
 80002c0:	4619      	mov	r1, r3
 80002c2:	481a      	ldr	r0, [pc, #104]	; (800032c <main+0x12c>)
 80002c4:	f000 ff97 	bl	80011f6 <_ZN3PMA6read_bEt>
 80002c8:	4603      	mov	r3, r0
 80002ca:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
	for ( int i = 0 ; i < 13 ; i++ ){
 80002ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80002d2:	3301      	adds	r3, #1
 80002d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80002d8:	e7e8      	b.n	80002ac <main+0xac>





	systick.Update( 4000 , sysctl.getSYSCLK() );
 80002da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80002de:	4618      	mov	r0, r3
 80002e0:	f7ff ff5e 	bl	80001a0 <_ZN6Ct_RCC9getSYSCLKEv>
 80002e4:	4603      	mov	r3, r0
 80002e6:	461a      	mov	r2, r3
 80002e8:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80002ec:	4810      	ldr	r0, [pc, #64]	; (8000330 <main+0x130>)
 80002ee:	f000 feeb 	bl	80010c8 <_ZN10Ct_SYSTICK6UpdateEmm>

	//OUTPUT
	GPIOC->CRH = ( 1 << GPIO_CRH_MODE13_Pos );
 80002f2:	4b10      	ldr	r3, [pc, #64]	; (8000334 <main+0x134>)
 80002f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80002f8:	605a      	str	r2, [r3, #4]


  while (1)
  {

	  GPIOC->ODR |= ( 1 << 13 );
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <main+0x134>)
 80002fc:	68db      	ldr	r3, [r3, #12]
 80002fe:	4a0d      	ldr	r2, [pc, #52]	; (8000334 <main+0x134>)
 8000300:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000304:	60d3      	str	r3, [r2, #12]
	  systick.delay(5000);
 8000306:	f241 3188 	movw	r1, #5000	; 0x1388
 800030a:	4809      	ldr	r0, [pc, #36]	; (8000330 <main+0x130>)
 800030c:	f000 fefa 	bl	8001104 <_ZN10Ct_SYSTICK5delayEm>
	  GPIOC->ODR &= ~( 1 << 13 );
 8000310:	4b08      	ldr	r3, [pc, #32]	; (8000334 <main+0x134>)
 8000312:	68db      	ldr	r3, [r3, #12]
 8000314:	4a07      	ldr	r2, [pc, #28]	; (8000334 <main+0x134>)
 8000316:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800031a:	60d3      	str	r3, [r2, #12]
	  systick.delay(5000);
 800031c:	f241 3188 	movw	r1, #5000	; 0x1388
 8000320:	4803      	ldr	r0, [pc, #12]	; (8000330 <main+0x130>)
 8000322:	f000 feef 	bl	8001104 <_ZN10Ct_SYSTICK5delayEm>
	  GPIOC->ODR |= ( 1 << 13 );
 8000326:	e7e8      	b.n	80002fa <main+0xfa>
 8000328:	0800199c 	.word	0x0800199c
 800032c:	20000028 	.word	0x20000028
 8000330:	20000020 	.word	0x20000020
 8000334:	40011000 	.word	0x40011000

08000338 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800033c:	4b15      	ldr	r3, [pc, #84]	; (8000394 <SystemInit+0x5c>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a14      	ldr	r2, [pc, #80]	; (8000394 <SystemInit+0x5c>)
 8000342:	f043 0301 	orr.w	r3, r3, #1
 8000346:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000348:	4b12      	ldr	r3, [pc, #72]	; (8000394 <SystemInit+0x5c>)
 800034a:	685a      	ldr	r2, [r3, #4]
 800034c:	4911      	ldr	r1, [pc, #68]	; (8000394 <SystemInit+0x5c>)
 800034e:	4b12      	ldr	r3, [pc, #72]	; (8000398 <SystemInit+0x60>)
 8000350:	4013      	ands	r3, r2
 8000352:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000354:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <SystemInit+0x5c>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a0e      	ldr	r2, [pc, #56]	; (8000394 <SystemInit+0x5c>)
 800035a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800035e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000362:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000364:	4b0b      	ldr	r3, [pc, #44]	; (8000394 <SystemInit+0x5c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a0a      	ldr	r2, [pc, #40]	; (8000394 <SystemInit+0x5c>)
 800036a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800036e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000370:	4b08      	ldr	r3, [pc, #32]	; (8000394 <SystemInit+0x5c>)
 8000372:	685b      	ldr	r3, [r3, #4]
 8000374:	4a07      	ldr	r2, [pc, #28]	; (8000394 <SystemInit+0x5c>)
 8000376:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800037a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800037c:	4b05      	ldr	r3, [pc, #20]	; (8000394 <SystemInit+0x5c>)
 800037e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000382:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000384:	4b05      	ldr	r3, [pc, #20]	; (800039c <SystemInit+0x64>)
 8000386:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800038a:	609a      	str	r2, [r3, #8]
#endif 
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr
 8000394:	40021000 	.word	0x40021000
 8000398:	f8ff0000 	.word	0xf8ff0000
 800039c:	e000ed00 	.word	0xe000ed00

080003a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80003a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80003a2:	e003      	b.n	80003ac <LoopCopyDataInit>

080003a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80003a4:	4b0b      	ldr	r3, [pc, #44]	; (80003d4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80003a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80003a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80003aa:	3104      	adds	r1, #4

080003ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80003ac:	480a      	ldr	r0, [pc, #40]	; (80003d8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80003ae:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80003b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80003b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80003b4:	d3f6      	bcc.n	80003a4 <CopyDataInit>
  ldr r2, =_sbss
 80003b6:	4a0a      	ldr	r2, [pc, #40]	; (80003e0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80003b8:	e002      	b.n	80003c0 <LoopFillZerobss>

080003ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  str r3, [r2], #4
 80003bc:	f842 3b04 	str.w	r3, [r2], #4

080003c0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80003c0:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80003c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80003c4:	d3f9      	bcc.n	80003ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003c6:	f7ff ffb7 	bl	8000338 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ca:	f001 faaf 	bl	800192c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ce:	f7ff ff17 	bl	8000200 <main>
  bx lr
 80003d2:	4770      	bx	lr
  ldr r3, =_sidata
 80003d4:	080019bc 	.word	0x080019bc
  ldr r0, =_sdata
 80003d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80003dc:	20000000 	.word	0x20000000
  ldr r2, =_sbss
 80003e0:	20000000 	.word	0x20000000
  ldr r3, = _ebss
 80003e4:	20000060 	.word	0x20000060

080003e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e8:	e7fe      	b.n	80003e8 <ADC1_2_IRQHandler>

080003ea <_ZN10Ct_SYSTICK7getFreqEv>:
	uint32_t* countptr  ;
public:

	explicit Ct_SYSTICK(  uint32_t* ptr ) ;
	inline uint32_t getCount( void ) { return *(countptr) ; }
	inline uint32_t getFreq( void )  { return Freq  ; }
 80003ea:	b480      	push	{r7}
 80003ec:	b083      	sub	sp, #12
 80003ee:	af00      	add	r7, sp, #0
 80003f0:	6078      	str	r0, [r7, #4]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4618      	mov	r0, r3
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr

08000400 <_ZN6Ct_RCCC1Em>:


};


 Ct_RCC::Ct_RCC ( uint32_t Config )
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	6039      	str	r1, [r7, #0]
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4a38      	ldr	r2, [pc, #224]	; (80004f0 <_ZN6Ct_RCCC1Em+0xf0>)
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000416:	605a      	str	r2, [r3, #4]
{




 if ( Config == BLUEPILL_CONFIG ){
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	2b01      	cmp	r3, #1
 800041c:	d131      	bne.n	8000482 <_ZN6Ct_RCCC1Em+0x82>

	/* Fill as HSE */

	 Ct_Fill_Struct.HSE_Val = Blue_Pill_Struct.HSE_Val ;
 800041e:	4a34      	ldr	r2, [pc, #208]	; (80004f0 <_ZN6Ct_RCCC1Em+0xf0>)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	641a      	str	r2, [r3, #64]	; 0x40
	 Ct_Fill_Struct.LSE_Val = Blue_Pill_Struct.LSE_Val ;
 8000424:	f04f 72fa 	mov.w	r2, #32768000	; 0x1f40000
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	645a      	str	r2, [r3, #68]	; 0x44
	 Ct_Fill_Struct.Main_Clk_Src = Blue_Pill_Struct.Main_Clk_Src ;
 800042c:	2202      	movs	r2, #2
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	649a      	str	r2, [r3, #72]	; 0x48
	 Ct_Fill_Struct.PLL_Src = Blue_Pill_Struct.PLL_Src ;
 8000432:	2201      	movs	r2, #1
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	64da      	str	r2, [r3, #76]	; 0x4c
	 Ct_Fill_Struct.HSE_Bypass = Blue_Pill_Struct.HSE_Bypass ;
 8000438:	2200      	movs	r2, #0
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	651a      	str	r2, [r3, #80]	; 0x50
	 Ct_Fill_Struct.PLL_Mul = Blue_Pill_Struct.PLL_Mul ;
 800043e:	2207      	movs	r2, #7
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	655a      	str	r2, [r3, #84]	; 0x54
	 Ct_Fill_Struct.HSE_Div = Blue_Pill_Struct.HSE_Div ;
 8000444:	2200      	movs	r2, #0
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	659a      	str	r2, [r3, #88]	; 0x58
	 Ct_Fill_Struct.CSS_En = Blue_Pill_Struct.CSS_En ;
 800044a:	2201      	movs	r2, #1
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	65da      	str	r2, [r3, #92]	; 0x5c
	 Ct_Fill_Struct.AHB_Scaler = Blue_Pill_Struct.AHB_Scaler ;
 8000450:	2207      	movs	r2, #7
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	661a      	str	r2, [r3, #96]	; 0x60
	 Ct_Fill_Struct.APB1_Scaler = Blue_Pill_Struct.APB1_Scaler ;
 8000456:	2204      	movs	r2, #4
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	665a      	str	r2, [r3, #100]	; 0x64
	 Ct_Fill_Struct.APB2_Scaler = Blue_Pill_Struct.APB2_Scaler ;
 800045c:	2200      	movs	r2, #0
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	669a      	str	r2, [r3, #104]	; 0x68
	 Ct_Fill_Struct.Main_Clk_Out = Blue_Pill_Struct.Main_Clk_Out ;
 8000462:	2200      	movs	r2, #0
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	66da      	str	r2, [r3, #108]	; 0x6c
	 Ct_Fill_Struct.USB_Pre = Blue_Pill_Struct.USB_Pre ;
 8000468:	2200      	movs	r2, #0
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	671a      	str	r2, [r3, #112]	; 0x70
	 Ct_Fill_Struct.ADC_Pre = Blue_Pill_Struct.ADC_Pre ;
 800046e:	2200      	movs	r2, #0
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	675a      	str	r2, [r3, #116]	; 0x74
	 Ct_Fill_Struct.RTC_Sel = Blue_Pill_Struct.RTC_Sel ;
 8000474:	2201      	movs	r2, #1
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	679a      	str	r2, [r3, #120]	; 0x78
	 Ct_Fill_Struct.LSE_Bypass = Blue_Pill_Struct.LSE_Bypass ;
 800047a:	2201      	movs	r2, #1
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	67da      	str	r2, [r3, #124]	; 0x7c
 8000480:	e02f      	b.n	80004e2 <_ZN6Ct_RCCC1Em+0xe2>
 else
 {

	 	/* Fill as HSI*/

	 Ct_Fill_Struct.HSE_Val = HSI_Default_Struct.HSE_Val ;
 8000482:	2200      	movs	r2, #0
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	641a      	str	r2, [r3, #64]	; 0x40
	 Ct_Fill_Struct.LSE_Val = HSI_Default_Struct.LSE_Val ;
 8000488:	2200      	movs	r2, #0
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	645a      	str	r2, [r3, #68]	; 0x44
	 Ct_Fill_Struct.Main_Clk_Src = HSI_Default_Struct.Main_Clk_Src ;
 800048e:	2200      	movs	r2, #0
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	649a      	str	r2, [r3, #72]	; 0x48
	 Ct_Fill_Struct.PLL_Src = HSI_Default_Struct.PLL_Src ;
 8000494:	2200      	movs	r2, #0
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	64da      	str	r2, [r3, #76]	; 0x4c
	 Ct_Fill_Struct.HSE_Bypass = HSI_Default_Struct.HSE_Bypass ;
 800049a:	2200      	movs	r2, #0
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	651a      	str	r2, [r3, #80]	; 0x50
	 Ct_Fill_Struct.PLL_Mul = HSI_Default_Struct.PLL_Mul ;
 80004a0:	2207      	movs	r2, #7
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	655a      	str	r2, [r3, #84]	; 0x54
	 Ct_Fill_Struct.HSE_Div = HSI_Default_Struct.HSE_Div ;
 80004a6:	2200      	movs	r2, #0
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	659a      	str	r2, [r3, #88]	; 0x58
	 Ct_Fill_Struct.CSS_En = HSI_Default_Struct.CSS_En ;
 80004ac:	2201      	movs	r2, #1
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	65da      	str	r2, [r3, #92]	; 0x5c
	 Ct_Fill_Struct.AHB_Scaler = HSI_Default_Struct.AHB_Scaler ;
 80004b2:	2207      	movs	r2, #7
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	661a      	str	r2, [r3, #96]	; 0x60
	 Ct_Fill_Struct.APB1_Scaler = HSI_Default_Struct.APB1_Scaler ;
 80004b8:	2204      	movs	r2, #4
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	665a      	str	r2, [r3, #100]	; 0x64
	 Ct_Fill_Struct.APB2_Scaler = HSI_Default_Struct.APB2_Scaler ;
 80004be:	2200      	movs	r2, #0
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	669a      	str	r2, [r3, #104]	; 0x68
	 Ct_Fill_Struct.Main_Clk_Out = HSI_Default_Struct.Main_Clk_Out ;
 80004c4:	2200      	movs	r2, #0
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	66da      	str	r2, [r3, #108]	; 0x6c
	 Ct_Fill_Struct.USB_Pre = HSI_Default_Struct.USB_Pre ;
 80004ca:	2200      	movs	r2, #0
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	671a      	str	r2, [r3, #112]	; 0x70
	 Ct_Fill_Struct.ADC_Pre = HSI_Default_Struct.ADC_Pre ;
 80004d0:	2200      	movs	r2, #0
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	675a      	str	r2, [r3, #116]	; 0x74
	 Ct_Fill_Struct.RTC_Sel = HSI_Default_Struct.RTC_Sel ;
 80004d6:	2202      	movs	r2, #2
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	679a      	str	r2, [r3, #120]	; 0x78
	 Ct_Fill_Struct.LSE_Bypass = HSI_Default_Struct.LSE_Bypass ;
 80004dc:	2200      	movs	r2, #0
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	67da      	str	r2, [r3, #124]	; 0x7c


	 }

}
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4618      	mov	r0, r3
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	007a1200 	.word	0x007a1200

080004f4 <_ZN6Ct_RCC6UpdateEv>:




 int32_t Ct_RCC :: Update ( void )
 {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b090      	sub	sp, #64	; 0x40
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]

	uint32_t pllsr      = 0 ;
 80004fc:	2300      	movs	r3, #0
 80004fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t AHB_Val    = 0 ;
 8000500:	2300      	movs	r3, #0
 8000502:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t APB1_Val   = 0 ;
 8000504:	2300      	movs	r3, #0
 8000506:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t APB2_Val   = 0 ;
 8000508:	2300      	movs	r3, #0
 800050a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t PLL_Input  = 0 ;
 800050c:	2300      	movs	r3, #0
 800050e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PLL_Output = 0 ;
 8000510:	2300      	movs	r3, #0
 8000512:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t hsesr = 0 ;
 8000514:	2300      	movs	r3, #0
 8000516:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t hsisr = 0 ;
 8000518:	2300      	movs	r3, #0
 800051a:	613b      	str	r3, [r7, #16]
	uint32_t rtc = 0 ;
 800051c:	2300      	movs	r3, #0
 800051e:	623b      	str	r3, [r7, #32]
	/* Switch to known HSI */
	if ( GET_MCLKS_S() != 0UL )
 8000520:	4b9a      	ldr	r3, [pc, #616]	; (800078c <_ZN6Ct_RCC6UpdateEv+0x298>)
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	089b      	lsrs	r3, r3, #2
 8000526:	f003 0303 	and.w	r3, r3, #3
 800052a:	2b00      	cmp	r3, #0
 800052c:	bf14      	ite	ne
 800052e:	2301      	movne	r3, #1
 8000530:	2300      	moveq	r3, #0
 8000532:	b2db      	uxtb	r3, r3
 8000534:	2b00      	cmp	r3, #0
 8000536:	d02e      	beq.n	8000596 <_ZN6Ct_RCC6UpdateEv+0xa2>
	{
		/*Switch to a stable Source (HSI) */
		RCC->CFGR &= ~( RCC_CFGR_SW_Msk ) ;
 8000538:	4b94      	ldr	r3, [pc, #592]	; (800078c <_ZN6Ct_RCC6UpdateEv+0x298>)
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	4a93      	ldr	r2, [pc, #588]	; (800078c <_ZN6Ct_RCC6UpdateEv+0x298>)
 800053e:	f023 0303 	bic.w	r3, r3, #3
 8000542:	6053      	str	r3, [r2, #4]

		systick.Update( systick.getFreq() , this->HSI_clk  ) ;
 8000544:	4892      	ldr	r0, [pc, #584]	; (8000790 <_ZN6Ct_RCC6UpdateEv+0x29c>)
 8000546:	f7ff ff50 	bl	80003ea <_ZN10Ct_SYSTICK7getFreqEv>
 800054a:	4601      	mov	r1, r0
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	461a      	mov	r2, r3
 8000552:	488f      	ldr	r0, [pc, #572]	; (8000790 <_ZN6Ct_RCC6UpdateEv+0x29c>)
 8000554:	f000 fdb8 	bl	80010c8 <_ZN10Ct_SYSTICK6UpdateEmm>

		/*Switch OFF PLL and HSE , To enable later code to be able to configure PLL */
		if ( !PLL_DISABLE() )
 8000558:	230a      	movs	r3, #10
 800055a:	2218      	movs	r2, #24
 800055c:	2119      	movs	r1, #25
 800055e:	488b      	ldr	r0, [pc, #556]	; (800078c <_ZN6Ct_RCC6UpdateEv+0x298>)
 8000560:	f000 fcec 	bl	8000f3c <_Z11osc_disablePVmmmm>
 8000564:	4603      	mov	r3, r0
 8000566:	f083 0301 	eor.w	r3, r3, #1
 800056a:	b2db      	uxtb	r3, r3
 800056c:	2b00      	cmp	r3, #0
 800056e:	d003      	beq.n	8000578 <_ZN6Ct_RCC6UpdateEv+0x84>
		{
			return TIMEOUT_FAIL ;
 8000570:	f06f 0301 	mvn.w	r3, #1
 8000574:	f000 bc08 	b.w	8000d88 <_ZN6Ct_RCC6UpdateEv+0x894>
		}
		if ( !HSE_DISABLE() )
 8000578:	230a      	movs	r3, #10
 800057a:	2210      	movs	r2, #16
 800057c:	2111      	movs	r1, #17
 800057e:	4883      	ldr	r0, [pc, #524]	; (800078c <_ZN6Ct_RCC6UpdateEv+0x298>)
 8000580:	f000 fcdc 	bl	8000f3c <_Z11osc_disablePVmmmm>
 8000584:	4603      	mov	r3, r0
 8000586:	f083 0301 	eor.w	r3, r3, #1
 800058a:	b2db      	uxtb	r3, r3
 800058c:	2b00      	cmp	r3, #0
 800058e:	d002      	beq.n	8000596 <_ZN6Ct_RCC6UpdateEv+0xa2>
		{
			return TIMEOUT_FAIL ;
 8000590:	f06f 0301 	mvn.w	r3, #1
 8000594:	e3f8      	b.n	8000d88 <_ZN6Ct_RCC6UpdateEv+0x894>

	}

	/*Configure New Clock */

	if ( this->Ct_Fill_Struct.Main_Clk_Src == Mclks::MCLKS_HSE ||
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800059a:	2b04      	cmp	r3, #4
 800059c:	d00c      	beq.n	80005b8 <_ZN6Ct_RCC6UpdateEv+0xc4>
		 this->Ct_Fill_Struct.Main_Clk_Src == Mclks::MCLKS_HSE_BYPASS ||
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ( this->Ct_Fill_Struct.Main_Clk_Src == Mclks::MCLKS_HSE ||
 80005a2:	2b05      	cmp	r3, #5
 80005a4:	d008      	beq.n	80005b8 <_ZN6Ct_RCC6UpdateEv+0xc4>
		 this->Ct_Fill_Struct.Main_Clk_Src == Mclks::MCLKS_PLLHSE ||
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
		 this->Ct_Fill_Struct.Main_Clk_Src == Mclks::MCLKS_HSE_BYPASS ||
 80005aa:	2b02      	cmp	r3, #2
 80005ac:	d004      	beq.n	80005b8 <_ZN6Ct_RCC6UpdateEv+0xc4>
		 this->Ct_Fill_Struct.Main_Clk_Src == Mclks::MCLKS_PLLHSE_BYPASS ){
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
		 this->Ct_Fill_Struct.Main_Clk_Src == Mclks::MCLKS_PLLHSE ||
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	f040 815d 	bne.w	8000872 <_ZN6Ct_RCC6UpdateEv+0x37e>

		/* Use PLL */
		if ( this->Ct_Fill_Struct.Main_Clk_Src == Mclks::MCLKS_PLLHSE || this->Ct_Fill_Struct.Main_Clk_Src == Mclks::MCLKS_PLLHSE_BYPASS )
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d003      	beq.n	80005c8 <_ZN6Ct_RCC6UpdateEv+0xd4>
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d102      	bne.n	80005ce <_ZN6Ct_RCC6UpdateEv+0xda>
		{
			pllsr = 1 ;
 80005c8:	2301      	movs	r3, #1
 80005ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005cc:	e001      	b.n	80005d2 <_ZN6Ct_RCC6UpdateEv+0xde>

		}
		else{

			hsesr = 1 ;
 80005ce:	2301      	movs	r3, #1
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24

		}

		/* Check HSE Boundaries */
		if ( ( this->Ct_Fill_Struct.HSE_Val > 16000000UL && (this->Ct_Fill_Struct.Main_Clk_Src == Mclks::MCLKS_HSE || this->Ct_Fill_Struct.Main_Clk_Src == Mclks::MCLKS_PLLHSE) )||
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d6:	4a6f      	ldr	r2, [pc, #444]	; (8000794 <_ZN6Ct_RCC6UpdateEv+0x2a0>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d907      	bls.n	80005ec <_ZN6Ct_RCC6UpdateEv+0xf8>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005e0:	2b04      	cmp	r3, #4
 80005e2:	d010      	beq.n	8000606 <_ZN6Ct_RCC6UpdateEv+0x112>
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005e8:	2b02      	cmp	r3, #2
 80005ea:	d00c      	beq.n	8000606 <_ZN6Ct_RCC6UpdateEv+0x112>
			 ( this->Ct_Fill_Struct.HSE_Val > 25000000UL && (this->Ct_Fill_Struct.Main_Clk_Src == Mclks::MCLKS_HSE_BYPASS || this->Ct_Fill_Struct.Main_Clk_Src == Mclks::MCLKS_PLLHSE_BYPASS)) )
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
		if ( ( this->Ct_Fill_Struct.HSE_Val > 16000000UL && (this->Ct_Fill_Struct.Main_Clk_Src == Mclks::MCLKS_HSE || this->Ct_Fill_Struct.Main_Clk_Src == Mclks::MCLKS_PLLHSE) )||
 80005f0:	4a69      	ldr	r2, [pc, #420]	; (8000798 <_ZN6Ct_RCC6UpdateEv+0x2a4>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d90a      	bls.n	800060c <_ZN6Ct_RCC6UpdateEv+0x118>
			 ( this->Ct_Fill_Struct.HSE_Val > 25000000UL && (this->Ct_Fill_Struct.Main_Clk_Src == Mclks::MCLKS_HSE_BYPASS || this->Ct_Fill_Struct.Main_Clk_Src == Mclks::MCLKS_PLLHSE_BYPASS)) )
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005fa:	2b05      	cmp	r3, #5
 80005fc:	d003      	beq.n	8000606 <_ZN6Ct_RCC6UpdateEv+0x112>
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000602:	2b01      	cmp	r3, #1
 8000604:	d102      	bne.n	800060c <_ZN6Ct_RCC6UpdateEv+0x118>
		{
			return ASSERT_FAIL ;
 8000606:	f04f 33ff 	mov.w	r3, #4294967295
 800060a:	e3bd      	b.n	8000d88 <_ZN6Ct_RCC6UpdateEv+0x894>

		}

		/* Check PLL Boundaries */

		PLL_Input = this->Ct_Fill_Struct.HSE_Val /( static_cast<uint32_t>(this->Ct_Fill_Struct.HSE_Div ) + 1 ) ;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000614:	3301      	adds	r3, #1
 8000616:	fbb2 f3f3 	udiv	r3, r2, r3
 800061a:	62fb      	str	r3, [r7, #44]	; 0x2c
		PLL_Output = PLL_Input * (static_cast<uint32_t>(this->Ct_Fill_Struct.PLL_Mul)+2UL) ;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000620:	1c9a      	adds	r2, r3, #2
 8000622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000624:	fb02 f303 	mul.w	r3, r2, r3
 8000628:	62bb      	str	r3, [r7, #40]	; 0x28

		if ( pllsr && ( PLL_Output > 72000000UL ) ){
 800062a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800062c:	2b00      	cmp	r3, #0
 800062e:	d006      	beq.n	800063e <_ZN6Ct_RCC6UpdateEv+0x14a>
 8000630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000632:	4a5a      	ldr	r2, [pc, #360]	; (800079c <_ZN6Ct_RCC6UpdateEv+0x2a8>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d902      	bls.n	800063e <_ZN6Ct_RCC6UpdateEv+0x14a>
			return ASSERT_FAIL ;
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	e3a4      	b.n	8000d88 <_ZN6Ct_RCC6UpdateEv+0x894>
		}

		/* Check Bus Clock Boundaries */


		if ( pllsr )
 800063e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000640:	2b00      	cmp	r3, #0
 8000642:	d071      	beq.n	8000728 <_ZN6Ct_RCC6UpdateEv+0x234>
		{
			AHB_Val = PLL_Output / GET_AHB_DIV(this->Ct_Fill_Struct.AHB_Scaler) ;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000648:	2b07      	cmp	r3, #7
 800064a:	d02d      	beq.n	80006a8 <_ZN6Ct_RCC6UpdateEv+0x1b4>
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000650:	2b08      	cmp	r3, #8
 8000652:	d027      	beq.n	80006a4 <_ZN6Ct_RCC6UpdateEv+0x1b0>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000658:	2b09      	cmp	r3, #9
 800065a:	d021      	beq.n	80006a0 <_ZN6Ct_RCC6UpdateEv+0x1ac>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000660:	2b0a      	cmp	r3, #10
 8000662:	d01b      	beq.n	800069c <_ZN6Ct_RCC6UpdateEv+0x1a8>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000668:	2b0b      	cmp	r3, #11
 800066a:	d015      	beq.n	8000698 <_ZN6Ct_RCC6UpdateEv+0x1a4>
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000670:	2b0c      	cmp	r3, #12
 8000672:	d00f      	beq.n	8000694 <_ZN6Ct_RCC6UpdateEv+0x1a0>
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000678:	2b0d      	cmp	r3, #13
 800067a:	d009      	beq.n	8000690 <_ZN6Ct_RCC6UpdateEv+0x19c>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000680:	2b0e      	cmp	r3, #14
 8000682:	d102      	bne.n	800068a <_ZN6Ct_RCC6UpdateEv+0x196>
 8000684:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000688:	e00f      	b.n	80006aa <_ZN6Ct_RCC6UpdateEv+0x1b6>
 800068a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800068e:	e00c      	b.n	80006aa <_ZN6Ct_RCC6UpdateEv+0x1b6>
 8000690:	2380      	movs	r3, #128	; 0x80
 8000692:	e00a      	b.n	80006aa <_ZN6Ct_RCC6UpdateEv+0x1b6>
 8000694:	2340      	movs	r3, #64	; 0x40
 8000696:	e008      	b.n	80006aa <_ZN6Ct_RCC6UpdateEv+0x1b6>
 8000698:	2310      	movs	r3, #16
 800069a:	e006      	b.n	80006aa <_ZN6Ct_RCC6UpdateEv+0x1b6>
 800069c:	2308      	movs	r3, #8
 800069e:	e004      	b.n	80006aa <_ZN6Ct_RCC6UpdateEv+0x1b6>
 80006a0:	2304      	movs	r3, #4
 80006a2:	e002      	b.n	80006aa <_ZN6Ct_RCC6UpdateEv+0x1b6>
 80006a4:	2302      	movs	r3, #2
 80006a6:	e000      	b.n	80006aa <_ZN6Ct_RCC6UpdateEv+0x1b6>
 80006a8:	2301      	movs	r3, #1
 80006aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b0:	63bb      	str	r3, [r7, #56]	; 0x38
			APB1_Val= AHB_Val / GET_APB_DIV(this->Ct_Fill_Struct.APB1_Scaler) ;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d013      	beq.n	80006e2 <_ZN6Ct_RCC6UpdateEv+0x1ee>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80006be:	2b04      	cmp	r3, #4
 80006c0:	d00d      	beq.n	80006de <_ZN6Ct_RCC6UpdateEv+0x1ea>
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80006c6:	2b05      	cmp	r3, #5
 80006c8:	d007      	beq.n	80006da <_ZN6Ct_RCC6UpdateEv+0x1e6>
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80006ce:	2b06      	cmp	r3, #6
 80006d0:	d101      	bne.n	80006d6 <_ZN6Ct_RCC6UpdateEv+0x1e2>
 80006d2:	2308      	movs	r3, #8
 80006d4:	e006      	b.n	80006e4 <_ZN6Ct_RCC6UpdateEv+0x1f0>
 80006d6:	2310      	movs	r3, #16
 80006d8:	e004      	b.n	80006e4 <_ZN6Ct_RCC6UpdateEv+0x1f0>
 80006da:	2304      	movs	r3, #4
 80006dc:	e002      	b.n	80006e4 <_ZN6Ct_RCC6UpdateEv+0x1f0>
 80006de:	2302      	movs	r3, #2
 80006e0:	e000      	b.n	80006e4 <_ZN6Ct_RCC6UpdateEv+0x1f0>
 80006e2:	2301      	movs	r3, #1
 80006e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80006e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ea:	637b      	str	r3, [r7, #52]	; 0x34
			APB2_Val= AHB_Val / GET_APB_DIV(this->Ct_Fill_Struct.APB2_Scaler) ;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d013      	beq.n	800071c <_ZN6Ct_RCC6UpdateEv+0x228>
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80006f8:	2b04      	cmp	r3, #4
 80006fa:	d00d      	beq.n	8000718 <_ZN6Ct_RCC6UpdateEv+0x224>
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000700:	2b05      	cmp	r3, #5
 8000702:	d007      	beq.n	8000714 <_ZN6Ct_RCC6UpdateEv+0x220>
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000708:	2b06      	cmp	r3, #6
 800070a:	d101      	bne.n	8000710 <_ZN6Ct_RCC6UpdateEv+0x21c>
 800070c:	2308      	movs	r3, #8
 800070e:	e006      	b.n	800071e <_ZN6Ct_RCC6UpdateEv+0x22a>
 8000710:	2310      	movs	r3, #16
 8000712:	e004      	b.n	800071e <_ZN6Ct_RCC6UpdateEv+0x22a>
 8000714:	2304      	movs	r3, #4
 8000716:	e002      	b.n	800071e <_ZN6Ct_RCC6UpdateEv+0x22a>
 8000718:	2302      	movs	r3, #2
 800071a:	e000      	b.n	800071e <_ZN6Ct_RCC6UpdateEv+0x22a>
 800071c:	2301      	movs	r3, #1
 800071e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000720:	fbb2 f3f3 	udiv	r3, r2, r3
 8000724:	633b      	str	r3, [r7, #48]	; 0x30
 8000726:	e07a      	b.n	800081e <_ZN6Ct_RCC6UpdateEv+0x32a>
		}
		else{

			AHB_Val = PLL_Input / GET_AHB_DIV(this->Ct_Fill_Struct.AHB_Scaler) ;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800072c:	2b07      	cmp	r3, #7
 800072e:	d037      	beq.n	80007a0 <_ZN6Ct_RCC6UpdateEv+0x2ac>
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000734:	2b08      	cmp	r3, #8
 8000736:	d027      	beq.n	8000788 <_ZN6Ct_RCC6UpdateEv+0x294>
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800073c:	2b09      	cmp	r3, #9
 800073e:	d021      	beq.n	8000784 <_ZN6Ct_RCC6UpdateEv+0x290>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000744:	2b0a      	cmp	r3, #10
 8000746:	d01b      	beq.n	8000780 <_ZN6Ct_RCC6UpdateEv+0x28c>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800074c:	2b0b      	cmp	r3, #11
 800074e:	d015      	beq.n	800077c <_ZN6Ct_RCC6UpdateEv+0x288>
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000754:	2b0c      	cmp	r3, #12
 8000756:	d00f      	beq.n	8000778 <_ZN6Ct_RCC6UpdateEv+0x284>
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800075c:	2b0d      	cmp	r3, #13
 800075e:	d009      	beq.n	8000774 <_ZN6Ct_RCC6UpdateEv+0x280>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000764:	2b0e      	cmp	r3, #14
 8000766:	d102      	bne.n	800076e <_ZN6Ct_RCC6UpdateEv+0x27a>
 8000768:	f44f 7380 	mov.w	r3, #256	; 0x100
 800076c:	e019      	b.n	80007a2 <_ZN6Ct_RCC6UpdateEv+0x2ae>
 800076e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000772:	e016      	b.n	80007a2 <_ZN6Ct_RCC6UpdateEv+0x2ae>
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	e014      	b.n	80007a2 <_ZN6Ct_RCC6UpdateEv+0x2ae>
 8000778:	2340      	movs	r3, #64	; 0x40
 800077a:	e012      	b.n	80007a2 <_ZN6Ct_RCC6UpdateEv+0x2ae>
 800077c:	2310      	movs	r3, #16
 800077e:	e010      	b.n	80007a2 <_ZN6Ct_RCC6UpdateEv+0x2ae>
 8000780:	2308      	movs	r3, #8
 8000782:	e00e      	b.n	80007a2 <_ZN6Ct_RCC6UpdateEv+0x2ae>
 8000784:	2304      	movs	r3, #4
 8000786:	e00c      	b.n	80007a2 <_ZN6Ct_RCC6UpdateEv+0x2ae>
 8000788:	2302      	movs	r3, #2
 800078a:	e00a      	b.n	80007a2 <_ZN6Ct_RCC6UpdateEv+0x2ae>
 800078c:	40021000 	.word	0x40021000
 8000790:	20000020 	.word	0x20000020
 8000794:	00f42400 	.word	0x00f42400
 8000798:	017d7840 	.word	0x017d7840
 800079c:	044aa200 	.word	0x044aa200
 80007a0:	2301      	movs	r3, #1
 80007a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a8:	63bb      	str	r3, [r7, #56]	; 0x38
			APB1_Val= AHB_Val / GET_APB_DIV(this->Ct_Fill_Struct.APB1_Scaler) ;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d013      	beq.n	80007da <_ZN6Ct_RCC6UpdateEv+0x2e6>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	d00d      	beq.n	80007d6 <_ZN6Ct_RCC6UpdateEv+0x2e2>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80007be:	2b05      	cmp	r3, #5
 80007c0:	d007      	beq.n	80007d2 <_ZN6Ct_RCC6UpdateEv+0x2de>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80007c6:	2b06      	cmp	r3, #6
 80007c8:	d101      	bne.n	80007ce <_ZN6Ct_RCC6UpdateEv+0x2da>
 80007ca:	2308      	movs	r3, #8
 80007cc:	e006      	b.n	80007dc <_ZN6Ct_RCC6UpdateEv+0x2e8>
 80007ce:	2310      	movs	r3, #16
 80007d0:	e004      	b.n	80007dc <_ZN6Ct_RCC6UpdateEv+0x2e8>
 80007d2:	2304      	movs	r3, #4
 80007d4:	e002      	b.n	80007dc <_ZN6Ct_RCC6UpdateEv+0x2e8>
 80007d6:	2302      	movs	r3, #2
 80007d8:	e000      	b.n	80007dc <_ZN6Ct_RCC6UpdateEv+0x2e8>
 80007da:	2301      	movs	r3, #1
 80007dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80007de:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e2:	637b      	str	r3, [r7, #52]	; 0x34
			APB2_Val= AHB_Val / GET_APB_DIV(this->Ct_Fill_Struct.APB2_Scaler) ;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d013      	beq.n	8000814 <_ZN6Ct_RCC6UpdateEv+0x320>
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80007f0:	2b04      	cmp	r3, #4
 80007f2:	d00d      	beq.n	8000810 <_ZN6Ct_RCC6UpdateEv+0x31c>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80007f8:	2b05      	cmp	r3, #5
 80007fa:	d007      	beq.n	800080c <_ZN6Ct_RCC6UpdateEv+0x318>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000800:	2b06      	cmp	r3, #6
 8000802:	d101      	bne.n	8000808 <_ZN6Ct_RCC6UpdateEv+0x314>
 8000804:	2308      	movs	r3, #8
 8000806:	e006      	b.n	8000816 <_ZN6Ct_RCC6UpdateEv+0x322>
 8000808:	2310      	movs	r3, #16
 800080a:	e004      	b.n	8000816 <_ZN6Ct_RCC6UpdateEv+0x322>
 800080c:	2304      	movs	r3, #4
 800080e:	e002      	b.n	8000816 <_ZN6Ct_RCC6UpdateEv+0x322>
 8000810:	2302      	movs	r3, #2
 8000812:	e000      	b.n	8000816 <_ZN6Ct_RCC6UpdateEv+0x322>
 8000814:	2301      	movs	r3, #1
 8000816:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000818:	fbb2 f3f3 	udiv	r3, r2, r3
 800081c:	633b      	str	r3, [r7, #48]	; 0x30

		}

		if ( AHB_Val > 72000000UL || APB1_Val > 36000000UL || APB2_Val > 72000000UL )
 800081e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000820:	4a97      	ldr	r2, [pc, #604]	; (8000a80 <_ZN6Ct_RCC6UpdateEv+0x58c>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d807      	bhi.n	8000836 <_ZN6Ct_RCC6UpdateEv+0x342>
 8000826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000828:	4a96      	ldr	r2, [pc, #600]	; (8000a84 <_ZN6Ct_RCC6UpdateEv+0x590>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d803      	bhi.n	8000836 <_ZN6Ct_RCC6UpdateEv+0x342>
 800082e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000830:	4a93      	ldr	r2, [pc, #588]	; (8000a80 <_ZN6Ct_RCC6UpdateEv+0x58c>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d902      	bls.n	800083c <_ZN6Ct_RCC6UpdateEv+0x348>
		{
			return ASSERT_FAIL ;
 8000836:	f04f 33ff 	mov.w	r3, #4294967295
 800083a:	e2a5      	b.n	8000d88 <_ZN6Ct_RCC6UpdateEv+0x894>
		}

		if ( this->Ct_Fill_Struct.HSE_Bypass == OscBypass::SEL_OSC ){
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000840:	2b00      	cmp	r3, #0
 8000842:	d10f      	bne.n	8000864 <_ZN6Ct_RCC6UpdateEv+0x370>
		/* Turn on HSE */
		if ( !HSE_ENABLE() ) {
 8000844:	230a      	movs	r3, #10
 8000846:	2210      	movs	r2, #16
 8000848:	2111      	movs	r1, #17
 800084a:	488f      	ldr	r0, [pc, #572]	; (8000a88 <_ZN6Ct_RCC6UpdateEv+0x594>)
 800084c:	f000 fb12 	bl	8000e74 <_Z10osc_enablePVmmmm>
 8000850:	4603      	mov	r3, r0
 8000852:	f083 0301 	eor.w	r3, r3, #1
 8000856:	b2db      	uxtb	r3, r3
 8000858:	2b00      	cmp	r3, #0
 800085a:	f000 813a 	beq.w	8000ad2 <_ZN6Ct_RCC6UpdateEv+0x5de>

			return TIMEOUT_FAIL ;
 800085e:	f06f 0301 	mvn.w	r3, #1
 8000862:	e291      	b.n	8000d88 <_ZN6Ct_RCC6UpdateEv+0x894>
		}

	}
		else{

			HSE_BYPASS_ENABLE();
 8000864:	4b88      	ldr	r3, [pc, #544]	; (8000a88 <_ZN6Ct_RCC6UpdateEv+0x594>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a87      	ldr	r2, [pc, #540]	; (8000a88 <_ZN6Ct_RCC6UpdateEv+0x594>)
 800086a:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 800086e:	6013      	str	r3, [r2, #0]
		if ( this->Ct_Fill_Struct.HSE_Bypass == OscBypass::SEL_OSC ){
 8000870:	e12f      	b.n	8000ad2 <_ZN6Ct_RCC6UpdateEv+0x5de>
		}


	 }
	else if ( this->Ct_Fill_Struct.Main_Clk_Src == Mclks::MCLKS_HSI ||
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000876:	2b03      	cmp	r3, #3
 8000878:	d004      	beq.n	8000884 <_ZN6Ct_RCC6UpdateEv+0x390>
			  this->Ct_Fill_Struct.Main_Clk_Src == Mclks::MCLKS_PLLHSI ){
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	else if ( this->Ct_Fill_Struct.Main_Clk_Src == Mclks::MCLKS_HSI ||
 800087e:	2b00      	cmp	r3, #0
 8000880:	f040 8128 	bne.w	8000ad4 <_ZN6Ct_RCC6UpdateEv+0x5e0>

		/* Use PLL */
		if ( this->Ct_Fill_Struct.Main_Clk_Src == Mclks::MCLKS_PLLHSI ){
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000888:	2b00      	cmp	r3, #0
 800088a:	d102      	bne.n	8000892 <_ZN6Ct_RCC6UpdateEv+0x39e>
			pllsr = 1 ;
 800088c:	2301      	movs	r3, #1
 800088e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000890:	e001      	b.n	8000896 <_ZN6Ct_RCC6UpdateEv+0x3a2>
		}
		else{
			hsisr = 1 ;
 8000892:	2301      	movs	r3, #1
 8000894:	613b      	str	r3, [r7, #16]
		}

		/* Check PLL Boundaries */

		PLL_Input = this->HSI_clk ;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	62fb      	str	r3, [r7, #44]	; 0x2c
		PLL_Output = PLL_Input * (static_cast<uint32_t>(this->Ct_Fill_Struct.PLL_Mul)+2UL) ;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80008a0:	1c9a      	adds	r2, r3, #2
 80008a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a4:	fb02 f303 	mul.w	r3, r2, r3
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28

		if ( pllsr && ( PLL_Output > 72000000UL ) ){
 80008aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d006      	beq.n	80008be <_ZN6Ct_RCC6UpdateEv+0x3ca>
 80008b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008b2:	4a73      	ldr	r2, [pc, #460]	; (8000a80 <_ZN6Ct_RCC6UpdateEv+0x58c>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d902      	bls.n	80008be <_ZN6Ct_RCC6UpdateEv+0x3ca>
			return ASSERT_FAIL ;
 80008b8:	f04f 33ff 	mov.w	r3, #4294967295
 80008bc:	e264      	b.n	8000d88 <_ZN6Ct_RCC6UpdateEv+0x894>
		}

		/* Check Bus Clock Boundaries */


		if ( pllsr )
 80008be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d071      	beq.n	80009a8 <_ZN6Ct_RCC6UpdateEv+0x4b4>
		{
			AHB_Val = PLL_Output / GET_AHB_DIV(this->Ct_Fill_Struct.AHB_Scaler) ;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008c8:	2b07      	cmp	r3, #7
 80008ca:	d02d      	beq.n	8000928 <_ZN6Ct_RCC6UpdateEv+0x434>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d0:	2b08      	cmp	r3, #8
 80008d2:	d027      	beq.n	8000924 <_ZN6Ct_RCC6UpdateEv+0x430>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d8:	2b09      	cmp	r3, #9
 80008da:	d021      	beq.n	8000920 <_ZN6Ct_RCC6UpdateEv+0x42c>
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e0:	2b0a      	cmp	r3, #10
 80008e2:	d01b      	beq.n	800091c <_ZN6Ct_RCC6UpdateEv+0x428>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e8:	2b0b      	cmp	r3, #11
 80008ea:	d015      	beq.n	8000918 <_ZN6Ct_RCC6UpdateEv+0x424>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f0:	2b0c      	cmp	r3, #12
 80008f2:	d00f      	beq.n	8000914 <_ZN6Ct_RCC6UpdateEv+0x420>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f8:	2b0d      	cmp	r3, #13
 80008fa:	d009      	beq.n	8000910 <_ZN6Ct_RCC6UpdateEv+0x41c>
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000900:	2b0e      	cmp	r3, #14
 8000902:	d102      	bne.n	800090a <_ZN6Ct_RCC6UpdateEv+0x416>
 8000904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000908:	e00f      	b.n	800092a <_ZN6Ct_RCC6UpdateEv+0x436>
 800090a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800090e:	e00c      	b.n	800092a <_ZN6Ct_RCC6UpdateEv+0x436>
 8000910:	2380      	movs	r3, #128	; 0x80
 8000912:	e00a      	b.n	800092a <_ZN6Ct_RCC6UpdateEv+0x436>
 8000914:	2340      	movs	r3, #64	; 0x40
 8000916:	e008      	b.n	800092a <_ZN6Ct_RCC6UpdateEv+0x436>
 8000918:	2310      	movs	r3, #16
 800091a:	e006      	b.n	800092a <_ZN6Ct_RCC6UpdateEv+0x436>
 800091c:	2308      	movs	r3, #8
 800091e:	e004      	b.n	800092a <_ZN6Ct_RCC6UpdateEv+0x436>
 8000920:	2304      	movs	r3, #4
 8000922:	e002      	b.n	800092a <_ZN6Ct_RCC6UpdateEv+0x436>
 8000924:	2302      	movs	r3, #2
 8000926:	e000      	b.n	800092a <_ZN6Ct_RCC6UpdateEv+0x436>
 8000928:	2301      	movs	r3, #1
 800092a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800092c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000930:	63bb      	str	r3, [r7, #56]	; 0x38
			APB1_Val= AHB_Val / GET_APB_DIV(this->Ct_Fill_Struct.APB1_Scaler) ;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000936:	2b00      	cmp	r3, #0
 8000938:	d013      	beq.n	8000962 <_ZN6Ct_RCC6UpdateEv+0x46e>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800093e:	2b04      	cmp	r3, #4
 8000940:	d00d      	beq.n	800095e <_ZN6Ct_RCC6UpdateEv+0x46a>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000946:	2b05      	cmp	r3, #5
 8000948:	d007      	beq.n	800095a <_ZN6Ct_RCC6UpdateEv+0x466>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800094e:	2b06      	cmp	r3, #6
 8000950:	d101      	bne.n	8000956 <_ZN6Ct_RCC6UpdateEv+0x462>
 8000952:	2308      	movs	r3, #8
 8000954:	e006      	b.n	8000964 <_ZN6Ct_RCC6UpdateEv+0x470>
 8000956:	2310      	movs	r3, #16
 8000958:	e004      	b.n	8000964 <_ZN6Ct_RCC6UpdateEv+0x470>
 800095a:	2304      	movs	r3, #4
 800095c:	e002      	b.n	8000964 <_ZN6Ct_RCC6UpdateEv+0x470>
 800095e:	2302      	movs	r3, #2
 8000960:	e000      	b.n	8000964 <_ZN6Ct_RCC6UpdateEv+0x470>
 8000962:	2301      	movs	r3, #1
 8000964:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000966:	fbb2 f3f3 	udiv	r3, r2, r3
 800096a:	637b      	str	r3, [r7, #52]	; 0x34
			APB2_Val= AHB_Val / GET_APB_DIV(this->Ct_Fill_Struct.APB2_Scaler) ;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000970:	2b00      	cmp	r3, #0
 8000972:	d013      	beq.n	800099c <_ZN6Ct_RCC6UpdateEv+0x4a8>
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000978:	2b04      	cmp	r3, #4
 800097a:	d00d      	beq.n	8000998 <_ZN6Ct_RCC6UpdateEv+0x4a4>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000980:	2b05      	cmp	r3, #5
 8000982:	d007      	beq.n	8000994 <_ZN6Ct_RCC6UpdateEv+0x4a0>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000988:	2b06      	cmp	r3, #6
 800098a:	d101      	bne.n	8000990 <_ZN6Ct_RCC6UpdateEv+0x49c>
 800098c:	2308      	movs	r3, #8
 800098e:	e006      	b.n	800099e <_ZN6Ct_RCC6UpdateEv+0x4aa>
 8000990:	2310      	movs	r3, #16
 8000992:	e004      	b.n	800099e <_ZN6Ct_RCC6UpdateEv+0x4aa>
 8000994:	2304      	movs	r3, #4
 8000996:	e002      	b.n	800099e <_ZN6Ct_RCC6UpdateEv+0x4aa>
 8000998:	2302      	movs	r3, #2
 800099a:	e000      	b.n	800099e <_ZN6Ct_RCC6UpdateEv+0x4aa>
 800099c:	2301      	movs	r3, #1
 800099e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80009a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a4:	633b      	str	r3, [r7, #48]	; 0x30
 80009a6:	e076      	b.n	8000a96 <_ZN6Ct_RCC6UpdateEv+0x5a2>
		}
		else{

			AHB_Val = PLL_Input / GET_AHB_DIV(this->Ct_Fill_Struct.AHB_Scaler) ;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ac:	2b07      	cmp	r3, #7
 80009ae:	d02d      	beq.n	8000a0c <_ZN6Ct_RCC6UpdateEv+0x518>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b4:	2b08      	cmp	r3, #8
 80009b6:	d027      	beq.n	8000a08 <_ZN6Ct_RCC6UpdateEv+0x514>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009bc:	2b09      	cmp	r3, #9
 80009be:	d021      	beq.n	8000a04 <_ZN6Ct_RCC6UpdateEv+0x510>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c4:	2b0a      	cmp	r3, #10
 80009c6:	d01b      	beq.n	8000a00 <_ZN6Ct_RCC6UpdateEv+0x50c>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009cc:	2b0b      	cmp	r3, #11
 80009ce:	d015      	beq.n	80009fc <_ZN6Ct_RCC6UpdateEv+0x508>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d4:	2b0c      	cmp	r3, #12
 80009d6:	d00f      	beq.n	80009f8 <_ZN6Ct_RCC6UpdateEv+0x504>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009dc:	2b0d      	cmp	r3, #13
 80009de:	d009      	beq.n	80009f4 <_ZN6Ct_RCC6UpdateEv+0x500>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e4:	2b0e      	cmp	r3, #14
 80009e6:	d102      	bne.n	80009ee <_ZN6Ct_RCC6UpdateEv+0x4fa>
 80009e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ec:	e00f      	b.n	8000a0e <_ZN6Ct_RCC6UpdateEv+0x51a>
 80009ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009f2:	e00c      	b.n	8000a0e <_ZN6Ct_RCC6UpdateEv+0x51a>
 80009f4:	2380      	movs	r3, #128	; 0x80
 80009f6:	e00a      	b.n	8000a0e <_ZN6Ct_RCC6UpdateEv+0x51a>
 80009f8:	2340      	movs	r3, #64	; 0x40
 80009fa:	e008      	b.n	8000a0e <_ZN6Ct_RCC6UpdateEv+0x51a>
 80009fc:	2310      	movs	r3, #16
 80009fe:	e006      	b.n	8000a0e <_ZN6Ct_RCC6UpdateEv+0x51a>
 8000a00:	2308      	movs	r3, #8
 8000a02:	e004      	b.n	8000a0e <_ZN6Ct_RCC6UpdateEv+0x51a>
 8000a04:	2304      	movs	r3, #4
 8000a06:	e002      	b.n	8000a0e <_ZN6Ct_RCC6UpdateEv+0x51a>
 8000a08:	2302      	movs	r3, #2
 8000a0a:	e000      	b.n	8000a0e <_ZN6Ct_RCC6UpdateEv+0x51a>
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a14:	63bb      	str	r3, [r7, #56]	; 0x38
			APB1_Val= AHB_Val / GET_APB_DIV(this->Ct_Fill_Struct.APB1_Scaler) ;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d013      	beq.n	8000a46 <_ZN6Ct_RCC6UpdateEv+0x552>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000a22:	2b04      	cmp	r3, #4
 8000a24:	d00d      	beq.n	8000a42 <_ZN6Ct_RCC6UpdateEv+0x54e>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000a2a:	2b05      	cmp	r3, #5
 8000a2c:	d007      	beq.n	8000a3e <_ZN6Ct_RCC6UpdateEv+0x54a>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000a32:	2b06      	cmp	r3, #6
 8000a34:	d101      	bne.n	8000a3a <_ZN6Ct_RCC6UpdateEv+0x546>
 8000a36:	2308      	movs	r3, #8
 8000a38:	e006      	b.n	8000a48 <_ZN6Ct_RCC6UpdateEv+0x554>
 8000a3a:	2310      	movs	r3, #16
 8000a3c:	e004      	b.n	8000a48 <_ZN6Ct_RCC6UpdateEv+0x554>
 8000a3e:	2304      	movs	r3, #4
 8000a40:	e002      	b.n	8000a48 <_ZN6Ct_RCC6UpdateEv+0x554>
 8000a42:	2302      	movs	r3, #2
 8000a44:	e000      	b.n	8000a48 <_ZN6Ct_RCC6UpdateEv+0x554>
 8000a46:	2301      	movs	r3, #1
 8000a48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4e:	637b      	str	r3, [r7, #52]	; 0x34
			APB2_Val= AHB_Val / GET_APB_DIV(this->Ct_Fill_Struct.APB2_Scaler) ;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d019      	beq.n	8000a8c <_ZN6Ct_RCC6UpdateEv+0x598>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000a5c:	2b04      	cmp	r3, #4
 8000a5e:	d00d      	beq.n	8000a7c <_ZN6Ct_RCC6UpdateEv+0x588>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000a64:	2b05      	cmp	r3, #5
 8000a66:	d007      	beq.n	8000a78 <_ZN6Ct_RCC6UpdateEv+0x584>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000a6c:	2b06      	cmp	r3, #6
 8000a6e:	d101      	bne.n	8000a74 <_ZN6Ct_RCC6UpdateEv+0x580>
 8000a70:	2308      	movs	r3, #8
 8000a72:	e00c      	b.n	8000a8e <_ZN6Ct_RCC6UpdateEv+0x59a>
 8000a74:	2310      	movs	r3, #16
 8000a76:	e00a      	b.n	8000a8e <_ZN6Ct_RCC6UpdateEv+0x59a>
 8000a78:	2304      	movs	r3, #4
 8000a7a:	e008      	b.n	8000a8e <_ZN6Ct_RCC6UpdateEv+0x59a>
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	e006      	b.n	8000a8e <_ZN6Ct_RCC6UpdateEv+0x59a>
 8000a80:	044aa200 	.word	0x044aa200
 8000a84:	02255100 	.word	0x02255100
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a94:	633b      	str	r3, [r7, #48]	; 0x30

		}

		if ( AHB_Val > 72000000UL || APB1_Val > 36000000UL || APB2_Val > 72000000UL )
 8000a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a98:	4a99      	ldr	r2, [pc, #612]	; (8000d00 <_ZN6Ct_RCC6UpdateEv+0x80c>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d807      	bhi.n	8000aae <_ZN6Ct_RCC6UpdateEv+0x5ba>
 8000a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aa0:	4a98      	ldr	r2, [pc, #608]	; (8000d04 <_ZN6Ct_RCC6UpdateEv+0x810>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d803      	bhi.n	8000aae <_ZN6Ct_RCC6UpdateEv+0x5ba>
 8000aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aa8:	4a95      	ldr	r2, [pc, #596]	; (8000d00 <_ZN6Ct_RCC6UpdateEv+0x80c>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d902      	bls.n	8000ab4 <_ZN6Ct_RCC6UpdateEv+0x5c0>
		{
			return ASSERT_FAIL ;
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab2:	e169      	b.n	8000d88 <_ZN6Ct_RCC6UpdateEv+0x894>
		}

		/* Turn on HSI */
		if ( !HSI_ENABLE() ) {
 8000ab4:	230a      	movs	r3, #10
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2101      	movs	r1, #1
 8000aba:	4893      	ldr	r0, [pc, #588]	; (8000d08 <_ZN6Ct_RCC6UpdateEv+0x814>)
 8000abc:	f000 f9da 	bl	8000e74 <_Z10osc_enablePVmmmm>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	f083 0301 	eor.w	r3, r3, #1
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d003      	beq.n	8000ad4 <_ZN6Ct_RCC6UpdateEv+0x5e0>

			return TIMEOUT_FAIL ;
 8000acc:	f06f 0301 	mvn.w	r3, #1
 8000ad0:	e15a      	b.n	8000d88 <_ZN6Ct_RCC6UpdateEv+0x894>
		if ( this->Ct_Fill_Struct.HSE_Bypass == OscBypass::SEL_OSC ){
 8000ad2:	bf00      	nop
	}


	/* Update RTC Source */

	if ( this->Ct_Fill_Struct.RTC_Sel == RTCSel::RTC_LSI ){
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d112      	bne.n	8000b02 <_ZN6Ct_RCC6UpdateEv+0x60e>

		if ( !LSI_ENABLE() )
 8000adc:	230a      	movs	r3, #10
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	488a      	ldr	r0, [pc, #552]	; (8000d0c <_ZN6Ct_RCC6UpdateEv+0x818>)
 8000ae4:	f000 f9c6 	bl	8000e74 <_Z10osc_enablePVmmmm>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	f083 0301 	eor.w	r3, r3, #1
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d002      	beq.n	8000afa <_ZN6Ct_RCC6UpdateEv+0x606>
		{
			return TIMEOUT_FAIL ;
 8000af4:	f06f 0301 	mvn.w	r3, #1
 8000af8:	e146      	b.n	8000d88 <_ZN6Ct_RCC6UpdateEv+0x894>
		}

		rtc = this->LSI_clk ;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	623b      	str	r3, [r7, #32]
 8000b00:	e044      	b.n	8000b8c <_ZN6Ct_RCC6UpdateEv+0x698>


	}
	else if ( this->Ct_Fill_Struct.RTC_Sel == RTCSel::RTC_LSE ){
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d11c      	bne.n	8000b44 <_ZN6Ct_RCC6UpdateEv+0x650>

			if ( this->Ct_Fill_Struct.LSE_Bypass == OscBypass::SEL_OSC )
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d10e      	bne.n	8000b30 <_ZN6Ct_RCC6UpdateEv+0x63c>
			{
				if ( !LSE_ENABLE() )
 8000b12:	230a      	movs	r3, #10
 8000b14:	2200      	movs	r2, #0
 8000b16:	2101      	movs	r1, #1
 8000b18:	487d      	ldr	r0, [pc, #500]	; (8000d10 <_ZN6Ct_RCC6UpdateEv+0x81c>)
 8000b1a:	f000 f9ab 	bl	8000e74 <_Z10osc_enablePVmmmm>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	f083 0301 	eor.w	r3, r3, #1
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d008      	beq.n	8000b3c <_ZN6Ct_RCC6UpdateEv+0x648>
				{
					return TIMEOUT_FAIL ;
 8000b2a:	f06f 0301 	mvn.w	r3, #1
 8000b2e:	e12b      	b.n	8000d88 <_ZN6Ct_RCC6UpdateEv+0x894>
				}

			}
			else{

					LSE_BYPASS_ENABLE();
 8000b30:	4b75      	ldr	r3, [pc, #468]	; (8000d08 <_ZN6Ct_RCC6UpdateEv+0x814>)
 8000b32:	6a1b      	ldr	r3, [r3, #32]
 8000b34:	4a74      	ldr	r2, [pc, #464]	; (8000d08 <_ZN6Ct_RCC6UpdateEv+0x814>)
 8000b36:	f043 0305 	orr.w	r3, r3, #5
 8000b3a:	6213      	str	r3, [r2, #32]

			}

		rtc = this->Ct_Fill_Struct.LSE_Val ;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b40:	623b      	str	r3, [r7, #32]
 8000b42:	e023      	b.n	8000b8c <_ZN6Ct_RCC6UpdateEv+0x698>

	}
	else if (this->Ct_Fill_Struct.RTC_Sel == RTCSel::RTC_HSE_DIV128 )
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000b48:	2b03      	cmp	r3, #3
 8000b4a:	d11d      	bne.n	8000b88 <_ZN6Ct_RCC6UpdateEv+0x694>
	{

		if ( this->Ct_Fill_Struct.HSE_Bypass == OscBypass::SEL_OSC ){
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d10e      	bne.n	8000b72 <_ZN6Ct_RCC6UpdateEv+0x67e>
		if ( !HSE_ENABLE() )
 8000b54:	230a      	movs	r3, #10
 8000b56:	2210      	movs	r2, #16
 8000b58:	2111      	movs	r1, #17
 8000b5a:	486b      	ldr	r0, [pc, #428]	; (8000d08 <_ZN6Ct_RCC6UpdateEv+0x814>)
 8000b5c:	f000 f98a 	bl	8000e74 <_Z10osc_enablePVmmmm>
 8000b60:	4603      	mov	r3, r0
 8000b62:	f083 0301 	eor.w	r3, r3, #1
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d008      	beq.n	8000b7e <_ZN6Ct_RCC6UpdateEv+0x68a>
		{
			return TIMEOUT_FAIL ;
 8000b6c:	f06f 0301 	mvn.w	r3, #1
 8000b70:	e10a      	b.n	8000d88 <_ZN6Ct_RCC6UpdateEv+0x894>
		}
		}
		else{
			HSE_BYPASS_ENABLE();
 8000b72:	4b65      	ldr	r3, [pc, #404]	; (8000d08 <_ZN6Ct_RCC6UpdateEv+0x814>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a64      	ldr	r2, [pc, #400]	; (8000d08 <_ZN6Ct_RCC6UpdateEv+0x814>)
 8000b78:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000b7c:	6013      	str	r3, [r2, #0]
		}

		rtc = this->Ct_Fill_Struct.HSE_Val /128UL ;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	09db      	lsrs	r3, r3, #7
 8000b84:	623b      	str	r3, [r7, #32]
 8000b86:	e001      	b.n	8000b8c <_ZN6Ct_RCC6UpdateEv+0x698>

	}
	else{

		rtc = 0 ;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]

	}

	/* Fill Scalers , and Values */

	RCC_Fill( this->Ct_Fill_Struct ) ;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3340      	adds	r3, #64	; 0x40
 8000b90:	4618      	mov	r0, r3
 8000b92:	f000 f909 	bl	8000da8 <_Z8RCC_FillRK15RCC_Fill_Struct>

	/* Turn on PLL */

	if ( pllsr && !PLL_ENABLE() ){
 8000b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d00d      	beq.n	8000bb8 <_ZN6Ct_RCC6UpdateEv+0x6c4>
 8000b9c:	230a      	movs	r3, #10
 8000b9e:	2218      	movs	r2, #24
 8000ba0:	2119      	movs	r1, #25
 8000ba2:	4859      	ldr	r0, [pc, #356]	; (8000d08 <_ZN6Ct_RCC6UpdateEv+0x814>)
 8000ba4:	f000 f966 	bl	8000e74 <_Z10osc_enablePVmmmm>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	f083 0301 	eor.w	r3, r3, #1
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <_ZN6Ct_RCC6UpdateEv+0x6c4>
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e000      	b.n	8000bba <_ZN6Ct_RCC6UpdateEv+0x6c6>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d002      	beq.n	8000bc4 <_ZN6Ct_RCC6UpdateEv+0x6d0>

		return TIMEOUT_FAIL ;
 8000bbe:	f06f 0301 	mvn.w	r3, #1
 8000bc2:	e0e1      	b.n	8000d88 <_ZN6Ct_RCC6UpdateEv+0x894>
	}

	uint32_t sysclk = pllsr ? PLL_Output : PLL_Input ;
 8000bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <_ZN6Ct_RCC6UpdateEv+0x6da>
 8000bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bcc:	e000      	b.n	8000bd0 <_ZN6Ct_RCC6UpdateEv+0x6dc>
 8000bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd0:	60fb      	str	r3, [r7, #12]

	/* Set Flash wait states */
	uint32_t ws = 0 ;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
	uint32_t preb = 0 ;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61bb      	str	r3, [r7, #24]
	if ( sysclk <= 24000000UL ){
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	4a4d      	ldr	r2, [pc, #308]	; (8000d14 <_ZN6Ct_RCC6UpdateEv+0x820>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d802      	bhi.n	8000be8 <_ZN6Ct_RCC6UpdateEv+0x6f4>
		ws = 0 ;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
 8000be6:	e008      	b.n	8000bfa <_ZN6Ct_RCC6UpdateEv+0x706>
	}
	else if ( sysclk <= 48000000UL ){
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4a4b      	ldr	r2, [pc, #300]	; (8000d18 <_ZN6Ct_RCC6UpdateEv+0x824>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d802      	bhi.n	8000bf6 <_ZN6Ct_RCC6UpdateEv+0x702>
		ws = 1 ;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	61fb      	str	r3, [r7, #28]
 8000bf4:	e001      	b.n	8000bfa <_ZN6Ct_RCC6UpdateEv+0x706>
	}
	else{
		ws = 2 ;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	61fb      	str	r3, [r7, #28]
	}

	if ( this->Ct_Fill_Struct.AHB_Scaler != AHBPre::AHBPRE_DIV1 ){
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfe:	2b07      	cmp	r3, #7
 8000c00:	d001      	beq.n	8000c06 <_ZN6Ct_RCC6UpdateEv+0x712>
		preb = 1 ;
 8000c02:	2301      	movs	r3, #1
 8000c04:	61bb      	str	r3, [r7, #24]
	}

	uint32_t temp ;

	temp = FLASH->ACR ;
 8000c06:	4b45      	ldr	r3, [pc, #276]	; (8000d1c <_ZN6Ct_RCC6UpdateEv+0x828>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	617b      	str	r3, [r7, #20]

	temp&= ~ ( FLASH_ACR_LATENCY_Msk | FLASH_ACR_PRFTBE_Msk ) ;
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	f023 0317 	bic.w	r3, r3, #23
 8000c12:	617b      	str	r3, [r7, #20]

	temp|= ( ws << FLASH_ACR_LATENCY_Pos | preb << FLASH_ACR_PRFTBE_Pos ) ;
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	011a      	lsls	r2, r3, #4
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	697a      	ldr	r2, [r7, #20]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	617b      	str	r3, [r7, #20]

	FLASH->ACR = temp ;
 8000c22:	4a3e      	ldr	r2, [pc, #248]	; (8000d1c <_ZN6Ct_RCC6UpdateEv+0x828>)
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	6013      	str	r3, [r2, #0]

	temp = RCC->CFGR ;
 8000c28:	4b37      	ldr	r3, [pc, #220]	; (8000d08 <_ZN6Ct_RCC6UpdateEv+0x814>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	617b      	str	r3, [r7, #20]

	temp &= ~ ( RCC_CFGR_SW_Msk ) ;
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	f023 0303 	bic.w	r3, r3, #3
 8000c34:	617b      	str	r3, [r7, #20]
	if ( pllsr )
 8000c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d004      	beq.n	8000c46 <_ZN6Ct_RCC6UpdateEv+0x752>
	{
		temp|= ( 2 << RCC_CFGR_SW_Pos ) ;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	f043 0302 	orr.w	r3, r3, #2
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	e006      	b.n	8000c54 <_ZN6Ct_RCC6UpdateEv+0x760>
	}
	else if ( hsesr )
 8000c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d003      	beq.n	8000c54 <_ZN6Ct_RCC6UpdateEv+0x760>
	{
		temp |= ( 1 << RCC_CFGR_SW_Pos ) ;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
	}

	RCC->CFGR = temp ;
 8000c54:	4a2c      	ldr	r2, [pc, #176]	; (8000d08 <_ZN6Ct_RCC6UpdateEv+0x814>)
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	6053      	str	r3, [r2, #4]
	/* Update SYSTICK Base */

	systick.Update( systick.getFreq() , sysclk ) ;
 8000c5a:	4831      	ldr	r0, [pc, #196]	; (8000d20 <_ZN6Ct_RCC6UpdateEv+0x82c>)
 8000c5c:	f7ff fbc5 	bl	80003ea <_ZN10Ct_SYSTICK7getFreqEv>
 8000c60:	4603      	mov	r3, r0
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	4619      	mov	r1, r3
 8000c66:	482e      	ldr	r0, [pc, #184]	; (8000d20 <_ZN6Ct_RCC6UpdateEv+0x82c>)
 8000c68:	f000 fa2e 	bl	80010c8 <_ZN10Ct_SYSTICK6UpdateEmm>


	/* Update Clock Values */

	this->SYS_clk  = sysclk   ;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	609a      	str	r2, [r3, #8]
	this->H_clk    = AHB_Val  ;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000c76:	611a      	str	r2, [r3, #16]
	this->AHB_clk  = AHB_Val  ;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000c7c:	61da      	str	r2, [r3, #28]
	this->APB1_clk = APB1_Val ;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c82:	621a      	str	r2, [r3, #32]
	this->APB2_clk = APB2_Val ;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c88:	625a      	str	r2, [r3, #36]	; 0x24
	this->RTC_clk  = rtc ;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6a3a      	ldr	r2, [r7, #32]
 8000c8e:	615a      	str	r2, [r3, #20]
	this->PLL_clk  = PLL_Output ;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c94:	60da      	str	r2, [r3, #12]
#if defined( RCC_APB1ENR_USBEN_Msk)
	this->USB_clk  = (PLL_Output * 2UL) / ( (this->Ct_Fill_Struct.USB_Pre == USBPre::USB_DIV1P5) ? (3UL) : (2UL) ) ;
 8000c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c98:	005a      	lsls	r2, r3, #1
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d101      	bne.n	8000ca6 <_ZN6Ct_RCC6UpdateEv+0x7b2>
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	e000      	b.n	8000ca8 <_ZN6Ct_RCC6UpdateEv+0x7b4>
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	fbb2 f2f3 	udiv	r2, r2, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	639a      	str	r2, [r3, #56]	; 0x38
#endif
#if defined( RCC_APB2ENR_ADC1EN_Msk)
	this->ADC1_clk = APB2_Val / GET_ADC_DIV( this->Ct_Fill_Struct.ADC_Pre ) ;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d00d      	beq.n	8000cd4 <_ZN6Ct_RCC6UpdateEv+0x7e0>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d007      	beq.n	8000cd0 <_ZN6Ct_RCC6UpdateEv+0x7dc>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d101      	bne.n	8000ccc <_ZN6Ct_RCC6UpdateEv+0x7d8>
 8000cc8:	2306      	movs	r3, #6
 8000cca:	e004      	b.n	8000cd6 <_ZN6Ct_RCC6UpdateEv+0x7e2>
 8000ccc:	2308      	movs	r3, #8
 8000cce:	e002      	b.n	8000cd6 <_ZN6Ct_RCC6UpdateEv+0x7e2>
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	e000      	b.n	8000cd6 <_ZN6Ct_RCC6UpdateEv+0x7e2>
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	631a      	str	r2, [r3, #48]	; 0x30
#if defined( RCC_AHBENR_SDIOEN_Msk )
	this->SDIO_clk = this->H_clk  ;
	this->SDIO_AHB_clk = this->H_clk /2 ;
#endif
#if defined( RCC_APB1ENR_I2C1EN_Msk )
	this->I2C1_clk = this->APB1_clk ;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6a1a      	ldr	r2, [r3, #32]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
#if defined ( RCC_APB1ENR_I2S3EN_Msk )
	this->I2S3_clk = sysclk ;
#endif
#if defined ( RCC_AHBENR_FLITFEN_Msk)
	this->FLITF_clk= this->HSI_clk ;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	629a      	str	r2, [r3, #40]	; 0x28
#endif
#if defined ( RCC_APB1ENR_TIM2EN_Msk )
	this->TIM2_clk = (this->Ct_Fill_Struct.APB1_Scaler == APBPre::APBPRE_DIV1 ) ? ( this->APB1_clk ) : ( 2UL * this->APB1_clk ) ;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d115      	bne.n	8000d24 <_ZN6Ct_RCC6UpdateEv+0x830>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6a1b      	ldr	r3, [r3, #32]
 8000cfc:	e015      	b.n	8000d2a <_ZN6Ct_RCC6UpdateEv+0x836>
 8000cfe:	bf00      	nop
 8000d00:	044aa200 	.word	0x044aa200
 8000d04:	02255100 	.word	0x02255100
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40021024 	.word	0x40021024
 8000d10:	40021020 	.word	0x40021020
 8000d14:	016e3600 	.word	0x016e3600
 8000d18:	02dc6c00 	.word	0x02dc6c00
 8000d1c:	40022000 	.word	0x40022000
 8000d20:	20000020 	.word	0x20000020
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6a1b      	ldr	r3, [r3, #32]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	6353      	str	r3, [r2, #52]	; 0x34
#endif
#if defined( RCC_APB2ENR_TIM1EN_Msk )
	this->TIM1_clk = (this->Ct_Fill_Struct.APB2_Scaler == APBPre::APBPRE_DIV1 ) ? ( this->APB2_clk ) : ( 2UL * this->APB2_clk ) ;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d102      	bne.n	8000d3c <_ZN6Ct_RCC6UpdateEv+0x848>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3a:	e002      	b.n	8000d42 <_ZN6Ct_RCC6UpdateEv+0x84e>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif

	this->MCO_clk = ((this->Ct_Fill_Struct.Main_Clk_Out == Mco::MCO_HSECLK )?(this->Ct_Fill_Struct.HSE_Val):
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d102      	bne.n	8000d54 <_ZN6Ct_RCC6UpdateEv+0x860>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	e016      	b.n	8000d82 <_ZN6Ct_RCC6UpdateEv+0x88e>
					(this->Ct_Fill_Struct.Main_Clk_Out == Mco::MCO_HSICLK )?(this->HSI_clk):
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000d58:	2b05      	cmp	r3, #5
 8000d5a:	d102      	bne.n	8000d62 <_ZN6Ct_RCC6UpdateEv+0x86e>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	e00f      	b.n	8000d82 <_ZN6Ct_RCC6UpdateEv+0x88e>
					(this->Ct_Fill_Struct.Main_Clk_Out == Mco::MCO_SYSCLK )?(this->SYS_clk):
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	d102      	bne.n	8000d70 <_ZN6Ct_RCC6UpdateEv+0x87c>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	e008      	b.n	8000d82 <_ZN6Ct_RCC6UpdateEv+0x88e>
					(this->Ct_Fill_Struct.Main_Clk_Out == Mco::MCO_PLLCLK )?((this->PLL_clk)/2UL):
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000d74:	2b07      	cmp	r3, #7
 8000d76:	d103      	bne.n	8000d80 <_ZN6Ct_RCC6UpdateEv+0x88c>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	085b      	lsrs	r3, r3, #1
 8000d7e:	e000      	b.n	8000d82 <_ZN6Ct_RCC6UpdateEv+0x88e>
 8000d80:	2300      	movs	r3, #0
	this->MCO_clk = ((this->Ct_Fill_Struct.Main_Clk_Out == Mco::MCO_HSECLK )?(this->Ct_Fill_Struct.HSE_Val):
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	6193      	str	r3, [r2, #24]
					(0UL));


	 return 1 ;
 8000d86:	2301      	movs	r3, #1



 }
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3740      	adds	r7, #64	; 0x40
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <_ZN10Ct_SYSTICK8getCountEv>:
	inline uint32_t getCount( void ) { return *(countptr) ; }
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <_Z8RCC_FillRK15RCC_Fill_Struct>:





void  RCC_Fill (  const RCC_Fill_Struct& Fill_Struct ) {
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]


	uint32_t temp ;


	temp = RCC->CFGR ;
 8000db0:	4b2e      	ldr	r3, [pc, #184]	; (8000e6c <_Z8RCC_FillRK15RCC_Fill_Struct+0xc4>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	60fb      	str	r3, [r7, #12]

	temp &= ~ ( RCC_CFGR_ADCPRE_Msk  | RCC_CFGR_USBPRE_Msk | RCC_CFGR_HPRE_Msk |
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <_Z8RCC_FillRK15RCC_Fill_Struct+0xc8>)
 8000dba:	4013      	ands	r3, r2
 8000dbc:	60fb      	str	r3, [r7, #12]
				RCC_CFGR_PPRE1_Msk   | RCC_CFGR_PPRE2_Msk  | RCC_CFGR_PLLMULL_Msk |
				RCC_CFGR_MCO_Msk     | RCC_CFGR_PLLXTPRE_Msk | RCC_CFGR_PLLSRC_Msk ) ;

	temp |= ( ( static_cast<uint32_t>(Fill_Struct.ADC_Pre)  << RCC_CFGR_ADCPRE_Pos     ) |
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dc2:	039a      	lsls	r2, r3, #14
				  ( static_cast<uint32_t>(Fill_Struct.USB_Pre)  << RCC_CFGR_USBPRE_Pos     ) |
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc8:	059b      	lsls	r3, r3, #22
	temp |= ( ( static_cast<uint32_t>(Fill_Struct.ADC_Pre)  << RCC_CFGR_ADCPRE_Pos     ) |
 8000dca:	431a      	orrs	r2, r3
				  ( static_cast<uint32_t>(Fill_Struct.AHB_Scaler) << RCC_CFGR_HPRE_Pos     ) |
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6a1b      	ldr	r3, [r3, #32]
 8000dd0:	011b      	lsls	r3, r3, #4
				  ( static_cast<uint32_t>(Fill_Struct.USB_Pre)  << RCC_CFGR_USBPRE_Pos     ) |
 8000dd2:	431a      	orrs	r2, r3
				  ( static_cast<uint32_t>(Fill_Struct.APB1_Scaler) << RCC_CFGR_PPRE1_Pos   ) |
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd8:	021b      	lsls	r3, r3, #8
				  ( static_cast<uint32_t>(Fill_Struct.AHB_Scaler) << RCC_CFGR_HPRE_Pos     ) |
 8000dda:	431a      	orrs	r2, r3
				  ( static_cast<uint32_t>(Fill_Struct.APB2_Scaler) << RCC_CFGR_PPRE2_Pos   ) |
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de0:	02db      	lsls	r3, r3, #11
				  ( static_cast<uint32_t>(Fill_Struct.APB1_Scaler) << RCC_CFGR_PPRE1_Pos   ) |
 8000de2:	431a      	orrs	r2, r3
				  ( static_cast<uint32_t>(Fill_Struct.PLL_Mul) << RCC_CFGR_PLLMULL_Pos     ) |
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	049b      	lsls	r3, r3, #18
				  ( static_cast<uint32_t>(Fill_Struct.APB2_Scaler) << RCC_CFGR_PPRE2_Pos   ) |
 8000dea:	431a      	orrs	r2, r3
				  ( static_cast<uint32_t>(Fill_Struct.Main_Clk_Out) << RCC_CFGR_MCO_Pos    ) |
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df0:	061b      	lsls	r3, r3, #24
				  ( static_cast<uint32_t>(Fill_Struct.PLL_Mul) << RCC_CFGR_PLLMULL_Pos     ) |
 8000df2:	431a      	orrs	r2, r3
				  ( static_cast<uint32_t>(Fill_Struct.HSE_Div) << RCC_CFGR_PLLXTPRE_Pos    ) |
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	045b      	lsls	r3, r3, #17
				  ( static_cast<uint32_t>(Fill_Struct.Main_Clk_Out) << RCC_CFGR_MCO_Pos    ) |
 8000dfa:	431a      	orrs	r2, r3
				  ( static_cast<uint32_t>(Fill_Struct.PLL_Src) << RCC_CFGR_PLLSRC_Pos      ) );
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	041b      	lsls	r3, r3, #16
				  ( static_cast<uint32_t>(Fill_Struct.HSE_Div) << RCC_CFGR_PLLXTPRE_Pos    ) |
 8000e02:	4313      	orrs	r3, r2
	temp |= ( ( static_cast<uint32_t>(Fill_Struct.ADC_Pre)  << RCC_CFGR_ADCPRE_Pos     ) |
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	60fb      	str	r3, [r7, #12]


	RCC->CFGR = temp ;
 8000e0a:	4a18      	ldr	r2, [pc, #96]	; (8000e6c <_Z8RCC_FillRK15RCC_Fill_Struct+0xc4>)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	6053      	str	r3, [r2, #4]

	temp = RCC->CR ;
 8000e10:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <_Z8RCC_FillRK15RCC_Fill_Struct+0xc4>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	60fb      	str	r3, [r7, #12]
	temp &= ~ ( RCC_CR_CSSON_Msk | RCC_CR_HSEBYP_Msk );
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000e1c:	60fb      	str	r3, [r7, #12]
	temp |=(( static_cast<uint32_t>(Fill_Struct.CSS_En) << RCC_CR_CSSON_Pos ) |
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69db      	ldr	r3, [r3, #28]
 8000e22:	04da      	lsls	r2, r3, #19
			( static_cast<uint32_t>(Fill_Struct.HSE_Bypass) << RCC_CR_HSEBYP_Pos) ) ;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	691b      	ldr	r3, [r3, #16]
 8000e28:	049b      	lsls	r3, r3, #18
	temp |=(( static_cast<uint32_t>(Fill_Struct.CSS_En) << RCC_CR_CSSON_Pos ) |
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	68fa      	ldr	r2, [r7, #12]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	60fb      	str	r3, [r7, #12]
	RCC->CR = temp ;
 8000e32:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <_Z8RCC_FillRK15RCC_Fill_Struct+0xc4>)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	6013      	str	r3, [r2, #0]



	temp = RCC->BDCR ;
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <_Z8RCC_FillRK15RCC_Fill_Struct+0xc4>)
 8000e3a:	6a1b      	ldr	r3, [r3, #32]
 8000e3c:	60fb      	str	r3, [r7, #12]


	temp &= ~ ( RCC_BDCR_RTCSEL_Msk | RCC_BDCR_LSEBYP_Msk ) ;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f423 7341 	bic.w	r3, r3, #772	; 0x304
 8000e44:	60fb      	str	r3, [r7, #12]


	temp|= ( ( static_cast<uint32_t>(Fill_Struct.RTC_Sel) << RCC_BDCR_RTCSEL_Pos ) |
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e4a:	021a      	lsls	r2, r3, #8
			 ( static_cast<uint32_t>(Fill_Struct.LSE_Bypass) << RCC_BDCR_LSEBYP_Pos ) ) ;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e50:	009b      	lsls	r3, r3, #2
	temp|= ( ( static_cast<uint32_t>(Fill_Struct.RTC_Sel) << RCC_BDCR_RTCSEL_Pos ) |
 8000e52:	4313      	orrs	r3, r2
 8000e54:	68fa      	ldr	r2, [r7, #12]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]

	RCC->BDCR = temp ;
 8000e5a:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <_Z8RCC_FillRK15RCC_Fill_Struct+0xc4>)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	6213      	str	r3, [r2, #32]


}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	f880000f 	.word	0xf880000f

08000e74 <_Z10osc_enablePVmmmm>:




bool osc_enable ( volatile uint32_t* reg , uint32_t rdyfpos , uint32_t onpos, uint32_t timeout ){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
 8000e80:	603b      	str	r3, [r7, #0]


	if ( *(reg) & ( 1 << rdyfpos ) && *(reg) & ( 1 << onpos )){
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2101      	movs	r1, #1
 8000e88:	68ba      	ldr	r2, [r7, #8]
 8000e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8e:	4013      	ands	r3, r2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d00a      	beq.n	8000eaa <_Z10osc_enablePVmmmm+0x36>
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2101      	movs	r1, #1
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <_Z10osc_enablePVmmmm+0x36>
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e000      	b.n	8000eac <_Z10osc_enablePVmmmm+0x38>
 8000eaa:	2300      	movs	r3, #0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <_Z10osc_enablePVmmmm+0x40>
		return true ;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e03d      	b.n	8000f30 <_Z10osc_enablePVmmmm+0xbc>
	}

	uint32_t bias = ( UINT_LEAST32_MAX - systick.getCount() ) <= timeout ? timeout : 0 ;
 8000eb4:	4820      	ldr	r0, [pc, #128]	; (8000f38 <_Z10osc_enablePVmmmm+0xc4>)
 8000eb6:	f7ff ff6b 	bl	8000d90 <_ZN10Ct_SYSTICK8getCountEv>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	683a      	ldr	r2, [r7, #0]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d301      	bcc.n	8000ec8 <_Z10osc_enablePVmmmm+0x54>
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	e000      	b.n	8000eca <_Z10osc_enablePVmmmm+0x56>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
	uint32_t timer_s =  systick.getCount() + bias  ;
 8000ecc:	481a      	ldr	r0, [pc, #104]	; (8000f38 <_Z10osc_enablePVmmmm+0xc4>)
 8000ece:	f7ff ff5f 	bl	8000d90 <_ZN10Ct_SYSTICK8getCountEv>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]

	(*reg)|= ( 1 << onpos ) ;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	2101      	movs	r1, #1
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	430a      	orrs	r2, r1
 8000eec:	601a      	str	r2, [r3, #0]

	while ( ( (systick.getCount() + bias ) - timer_s ) < timeout ){
 8000eee:	4812      	ldr	r0, [pc, #72]	; (8000f38 <_Z10osc_enablePVmmmm+0xc4>)
 8000ef0:	f7ff ff4e 	bl	8000d90 <_ZN10Ct_SYSTICK8getCountEv>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	441a      	add	r2, r3
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	683a      	ldr	r2, [r7, #0]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	bf8c      	ite	hi
 8000f04:	2301      	movhi	r3, #1
 8000f06:	2300      	movls	r3, #0
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d00f      	beq.n	8000f2e <_Z10osc_enablePVmmmm+0xba>

		if ( *(reg) & ( 1 << rdyfpos ) ){
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2101      	movs	r1, #1
 8000f14:	68ba      	ldr	r2, [r7, #8]
 8000f16:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	bf14      	ite	ne
 8000f20:	2301      	movne	r3, #1
 8000f22:	2300      	moveq	r3, #0
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d0e1      	beq.n	8000eee <_Z10osc_enablePVmmmm+0x7a>
			return true ;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e000      	b.n	8000f30 <_Z10osc_enablePVmmmm+0xbc>
		}

	}

	return false ;
 8000f2e:	2300      	movs	r3, #0
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000020 	.word	0x20000020

08000f3c <_Z11osc_disablePVmmmm>:


bool osc_disable ( volatile uint32_t* reg , uint32_t rdyfpos , uint32_t onpos , uint32_t timeout )
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	603b      	str	r3, [r7, #0]

	if ( !( *(reg) & ( 1 << onpos )) ){
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2101      	movs	r1, #1
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	fa01 f202 	lsl.w	r2, r1, r2
 8000f56:	4013      	ands	r3, r2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	bf0c      	ite	eq
 8000f5c:	2301      	moveq	r3, #1
 8000f5e:	2300      	movne	r3, #0
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <_Z11osc_disablePVmmmm+0x2e>
		return true ;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e03e      	b.n	8000fe8 <_Z11osc_disablePVmmmm+0xac>
	}

	uint32_t bias = ( UINT_LEAST32_MAX - systick.getCount() ) <= timeout ? timeout : 0 ;
 8000f6a:	4821      	ldr	r0, [pc, #132]	; (8000ff0 <_Z11osc_disablePVmmmm+0xb4>)
 8000f6c:	f7ff ff10 	bl	8000d90 <_ZN10Ct_SYSTICK8getCountEv>
 8000f70:	4603      	mov	r3, r0
 8000f72:	43db      	mvns	r3, r3
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d301      	bcc.n	8000f7e <_Z11osc_disablePVmmmm+0x42>
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	e000      	b.n	8000f80 <_Z11osc_disablePVmmmm+0x44>
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
	uint32_t timer_s =  systick.getCount() + bias  ;
 8000f82:	481b      	ldr	r0, [pc, #108]	; (8000ff0 <_Z11osc_disablePVmmmm+0xb4>)
 8000f84:	f7ff ff04 	bl	8000d90 <_ZN10Ct_SYSTICK8getCountEv>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]

	(*reg)&= ~( 1 << onpos ) ;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	2101      	movs	r1, #1
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	400a      	ands	r2, r1
 8000fa4:	601a      	str	r2, [r3, #0]

	while ( ( (systick.getCount() + bias ) - timer_s ) < timeout ){
 8000fa6:	4812      	ldr	r0, [pc, #72]	; (8000ff0 <_Z11osc_disablePVmmmm+0xb4>)
 8000fa8:	f7ff fef2 	bl	8000d90 <_ZN10Ct_SYSTICK8getCountEv>
 8000fac:	4602      	mov	r2, r0
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	441a      	add	r2, r3
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	bf8c      	ite	hi
 8000fbc:	2301      	movhi	r3, #1
 8000fbe:	2300      	movls	r3, #0
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00f      	beq.n	8000fe6 <_Z11osc_disablePVmmmm+0xaa>

		if ( !(*(reg) & ( 1 << rdyfpos ) ) ){
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2101      	movs	r1, #1
 8000fcc:	68ba      	ldr	r2, [r7, #8]
 8000fce:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	bf0c      	ite	eq
 8000fd8:	2301      	moveq	r3, #1
 8000fda:	2300      	movne	r3, #0
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d0e1      	beq.n	8000fa6 <_Z11osc_disablePVmmmm+0x6a>
			return true ;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e000      	b.n	8000fe8 <_Z11osc_disablePVmmmm+0xac>
		}

	}

	return false ;
 8000fe6:	2300      	movs	r3, #0

}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000020 	.word	0x20000020

08000ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	2b00      	cmp	r3, #0
 8001006:	db0c      	blt.n	8001022 <__NVIC_SetPriority+0x2e>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	4a0e      	ldr	r2, [pc, #56]	; (8001048 <__NVIC_SetPriority+0x54>)
 800100e:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001012:	4608      	mov	r0, r1
 8001014:	011b      	lsls	r3, r3, #4
 8001016:	b2d9      	uxtb	r1, r3
 8001018:	1813      	adds	r3, r2, r0
 800101a:	460a      	mov	r2, r1
 800101c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001020:	e00c      	b.n	800103c <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4909      	ldr	r1, [pc, #36]	; (800104c <__NVIC_SetPriority+0x58>)
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	f003 030f 	and.w	r3, r3, #15
 8001032:	3b04      	subs	r3, #4
 8001034:	0112      	lsls	r2, r2, #4
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	440b      	add	r3, r1
 800103a:	761a      	strb	r2, [r3, #24]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000e100 	.word	0xe000e100
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001060:	d301      	bcc.n	8001066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001062:	2301      	movs	r3, #1
 8001064:	e00f      	b.n	8001086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <SysTick_Config+0x40>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106e:	210f      	movs	r1, #15
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f7ff ffbe 	bl	8000ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <SysTick_Config+0x40>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <SysTick_Config+0x40>)
 8001080:	2207      	movs	r2, #7
 8001082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	e000e010 	.word	0xe000e010

08001094 <_ZN10Ct_SYSTICKC1EPm>:

#include <DP_SYSTICK.h>



Ct_SYSTICK::Ct_SYSTICK ( uint32_t* ptr )
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
	:Freq( 1000UL ) , countptr(ptr)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	605a      	str	r2, [r3, #4]
{

	this->Update(Freq, 8000000UL );
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <_ZN10Ct_SYSTICKC1EPm+0x30>)
 80010b2:	4619      	mov	r1, r3
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 f807 	bl	80010c8 <_ZN10Ct_SYSTICK6UpdateEmm>


}
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	007a1200 	.word	0x007a1200

080010c8 <_ZN10Ct_SYSTICK6UpdateEmm>:


int32_t Ct_SYSTICK::Update( uint32_t Freq  , uint32_t sysFreq ){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]

	if ( sysFreq < Freq ){
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d902      	bls.n	80010e2 <_ZN10Ct_SYSTICK6UpdateEmm+0x1a>
		return ASSERT_FAIL ;
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	e00b      	b.n	80010fa <_ZN10Ct_SYSTICK6UpdateEmm+0x32>
	}

	this->Freq = Freq ;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	68ba      	ldr	r2, [r7, #8]
 80010e6:	601a      	str	r2, [r3, #0]
	uint32_t ticks = (sysFreq)/Freq ;
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f0:	617b      	str	r3, [r7, #20]
	SysTick_Config( ticks );
 80010f2:	6978      	ldr	r0, [r7, #20]
 80010f4:	f7ff ffac 	bl	8001050 <SysTick_Config>

	return 1 ;
 80010f8:	2301      	movs	r3, #1


}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <_ZN10Ct_SYSTICK5delayEm>:


void Ct_SYSTICK::delay ( uint32_t t_ms )
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]

	uint32_t s_val = this->getCount() ;
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff fe3e 	bl	8000d90 <_ZN10Ct_SYSTICK8getCountEv>
 8001114:	60f8      	str	r0, [r7, #12]

	while ( (this->getCount() - s_val) < ((t_ms*this->Freq)/1000) );
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff fe3a 	bl	8000d90 <_ZN10Ct_SYSTICK8getCountEv>
 800111c:	4602      	mov	r2, r0
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	1ad2      	subs	r2, r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6839      	ldr	r1, [r7, #0]
 8001128:	fb01 f303 	mul.w	r3, r1, r3
 800112c:	4907      	ldr	r1, [pc, #28]	; (800114c <_ZN10Ct_SYSTICK5delayEm+0x48>)
 800112e:	fba1 1303 	umull	r1, r3, r1, r3
 8001132:	099b      	lsrs	r3, r3, #6
 8001134:	429a      	cmp	r2, r3
 8001136:	bf34      	ite	cc
 8001138:	2301      	movcc	r3, #1
 800113a:	2300      	movcs	r3, #0
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d000      	beq.n	8001144 <_ZN10Ct_SYSTICK5delayEm+0x40>
 8001142:	e7e8      	b.n	8001116 <_ZN10Ct_SYSTICK5delayEm+0x12>


}
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	10624dd3 	.word	0x10624dd3

08001150 <SysTick_Handler>:
extern "C" {

#endif

void SysTick_Handler ( void )
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
	systick_c++ ;
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <SysTick_Handler+0x18>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	3301      	adds	r3, #1
 800115a:	4a03      	ldr	r2, [pc, #12]	; (8001168 <SysTick_Handler+0x18>)
 800115c:	6013      	str	r3, [r2, #0]
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	2000001c 	.word	0x2000001c

0800116c <_Z41__static_initialization_and_destruction_0ii>:


#ifdef __cplusplus
}
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d108      	bne.n	800118e <_Z41__static_initialization_and_destruction_0ii+0x22>
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001182:	4293      	cmp	r3, r2
 8001184:	d103      	bne.n	800118e <_Z41__static_initialization_and_destruction_0ii+0x22>
Ct_SYSTICK systick( &systick_c ) ;
 8001186:	4904      	ldr	r1, [pc, #16]	; (8001198 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001188:	4804      	ldr	r0, [pc, #16]	; (800119c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800118a:	f7ff ff83 	bl	8001094 <_ZN10Ct_SYSTICKC1EPm>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000001c 	.word	0x2000001c
 800119c:	20000020 	.word	0x20000020

080011a0 <_GLOBAL__sub_I__ZN10Ct_SYSTICKC2EPm>:
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80011a8:	2001      	movs	r0, #1
 80011aa:	f7ff ffdf 	bl	800116c <_Z41__static_initialization_and_destruction_0ii>
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <_ZN3PMAC1Ev>:
 ***********************
 *******************************
 ******************************* PMA Functions **************************/


PMA::PMA( void )
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
:ptr_unalloc((64UL)),
sizew16_free(PMA_NUM_LOCATIONS-USB_BTABLE_SIZE),
sizew16_used(USB_BTABLE_SIZE),
eps_allocated(0),
EPs_alloc{0,0,0,0,0,0,0,0}
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	22ff      	movs	r2, #255	; 0xff
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2240      	movs	r2, #64	; 0x40
 80011ca:	811a      	strh	r2, [r3, #8]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	22e0      	movs	r2, #224	; 0xe0
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2220      	movs	r2, #32
 80011d6:	611a      	str	r2, [r3, #16]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	751a      	strb	r2, [r3, #20]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3318      	adds	r3, #24
 80011e2:	2220      	movs	r2, #32
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 fbc4 	bl	8001974 <memset>
{
}
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <_ZN3PMA6read_bEt>:
	return *((uint16_t*)(((uint32_t)ptr)*2UL + USB_PMAADDR)) ;
}


uint16_t PMA::read_b(  uint16_t  ptr )
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	460b      	mov	r3, r1
 8001200:	807b      	strh	r3, [r7, #2]
	if (ptr%2)
 8001202:	887b      	ldrh	r3, [r7, #2]
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00c      	beq.n	8001226 <_ZN3PMA6read_bEt+0x30>
	{
		--ptr;
 800120c:	887b      	ldrh	r3, [r7, #2]
 800120e:	3b01      	subs	r3, #1
 8001210:	807b      	strh	r3, [r7, #2]
		return HW_MSB(*((uint16_t*)(((uint32_t)ptr)*2UL + USB_PMAADDR))) ;
 8001212:	887b      	ldrh	r3, [r7, #2]
 8001214:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001218:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	121b      	asrs	r3, r3, #8
 8001222:	b29b      	uxth	r3, r3
 8001224:	e008      	b.n	8001238 <_ZN3PMA6read_bEt+0x42>
	}
	return HW_LSB(*((uint16_t*)(((uint32_t)ptr)*2UL + USB_PMAADDR))) ;
 8001226:	887b      	ldrh	r3, [r7, #2]
 8001228:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800122c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	b29b      	uxth	r3, r3
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr

08001242 <_ZN3PMA8write_hwEtt>:




void PMA::write_hw( uint16_t val , uint16_t ptr )
{
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	460b      	mov	r3, r1
 800124c:	807b      	strh	r3, [r7, #2]
 800124e:	4613      	mov	r3, r2
 8001250:	803b      	strh	r3, [r7, #0]
	if ( ptr%2 ){
 8001252:	883b      	ldrh	r3, [r7, #0]
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b00      	cmp	r3, #0
 800125a:	d002      	beq.n	8001262 <_ZN3PMA8write_hwEtt+0x20>
		ptr--;
 800125c:	883b      	ldrh	r3, [r7, #0]
 800125e:	3b01      	subs	r3, #1
 8001260:	803b      	strh	r3, [r7, #0]
	}
	*((uint16_t*)(((uint32_t)ptr)*2UL + USB_PMAADDR)) = val ;
 8001262:	883b      	ldrh	r3, [r7, #0]
 8001264:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001268:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	461a      	mov	r2, r3
 8001270:	887b      	ldrh	r3, [r7, #2]
 8001272:	8013      	strh	r3, [r2, #0]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr

0800127e <_ZN3PMA12PMA_allocateER11EP_Config_S>:




int32_t PMA::PMA_allocate( EP_Config_S& ep )
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b08a      	sub	sp, #40	; 0x28
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	6039      	str	r1, [r7, #0]


	//Don't allocate if it already exists
	for ( uint32_t i = 0 ; i < this->eps_allocated ; i++ )
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	7d1b      	ldrb	r3, [r3, #20]
 8001290:	461a      	mov	r2, r3
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	4293      	cmp	r3, r2
 8001296:	d213      	bcs.n	80012c0 <_ZN3PMA12PMA_allocateER11EP_Config_S+0x42>
	{
		if ( this->EPs_alloc[i] == ep.EP_Num || this->eps_allocated >= EP_NUM )
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800129c:	3206      	adds	r2, #6
 800129e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d003      	beq.n	80012b2 <_ZN3PMA12PMA_allocateER11EP_Config_S+0x34>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	7d1b      	ldrb	r3, [r3, #20]
 80012ae:	2b07      	cmp	r3, #7
 80012b0:	d902      	bls.n	80012b8 <_ZN3PMA12PMA_allocateER11EP_Config_S+0x3a>
		{
			return -1 ;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
 80012b6:	e0a2      	b.n	80013fe <_ZN3PMA12PMA_allocateER11EP_Config_S+0x180>
	for ( uint32_t i = 0 ; i < this->eps_allocated ; i++ )
 80012b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ba:	3301      	adds	r3, #1
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
 80012be:	e7e5      	b.n	800128c <_ZN3PMA12PMA_allocateER11EP_Config_S+0xe>
		}
	}

	//allocate , one half word for unused buffers as padding
	 uint32_t REQsz_rx0 = ( ep.EP_RX0_BSize ) ? ep.EP_RX0_BSize : 2UL ;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d002      	beq.n	80012ce <_ZN3PMA12PMA_allocateER11EP_Config_S+0x50>
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	e000      	b.n	80012d0 <_ZN3PMA12PMA_allocateER11EP_Config_S+0x52>
 80012ce:	2302      	movs	r3, #2
 80012d0:	61bb      	str	r3, [r7, #24]
	 uint32_t REQsz_tx0 = ( ep.EP_TX0_BSize ) ? ep.EP_TX0_BSize : 2UL ;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d002      	beq.n	80012e0 <_ZN3PMA12PMA_allocateER11EP_Config_S+0x62>
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	e000      	b.n	80012e2 <_ZN3PMA12PMA_allocateER11EP_Config_S+0x64>
 80012e0:	2302      	movs	r3, #2
 80012e2:	617b      	str	r3, [r7, #20]
	 uint32_t bl_size ;
	 uint32_t bl_num  ;

	 if ( REQsz_rx0 > 62UL )
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	2b3e      	cmp	r3, #62	; 0x3e
 80012e8:	d905      	bls.n	80012f6 <_ZN3PMA12PMA_allocateER11EP_Config_S+0x78>
	 {
		 bl_size = 1UL ;
 80012ea:	2301      	movs	r3, #1
 80012ec:	623b      	str	r3, [r7, #32]
		 bl_num  = REQsz_rx0/32UL ;
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	095b      	lsrs	r3, r3, #5
 80012f2:	61fb      	str	r3, [r7, #28]
 80012f4:	e004      	b.n	8001300 <_ZN3PMA12PMA_allocateER11EP_Config_S+0x82>
	 }
	 else{
		 bl_size = 0 ;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
		 bl_num  = REQsz_rx0/2UL ;
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	085b      	lsrs	r3, r3, #1
 80012fe:	61fb      	str	r3, [r7, #28]

	 }



	 uint16_t rx_w = (( bl_size << USB_COUNT0_RX_BLSIZE_Pos )|( bl_num << USB_COUNT0_RX_NUM_BLOCK_Pos ));
 8001300:	6a3b      	ldr	r3, [r7, #32]
 8001302:	b29b      	uxth	r3, r3
 8001304:	03db      	lsls	r3, r3, #15
 8001306:	b29a      	uxth	r2, r3
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	b29b      	uxth	r3, r3
 800130c:	029b      	lsls	r3, r3, #10
 800130e:	b29b      	uxth	r3, r3
 8001310:	4313      	orrs	r3, r2
 8001312:	827b      	strh	r3, [r7, #18]
	 uint32_t REQsz_mem = REQsz_rx0 + REQsz_tx0 ;
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	4413      	add	r3, r2
 800131a:	60fb      	str	r3, [r7, #12]
	 if ( ( this->sizew16_free * 2 ) < REQsz_mem )
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	429a      	cmp	r2, r3
 8001326:	d902      	bls.n	800132e <_ZN3PMA12PMA_allocateER11EP_Config_S+0xb0>
	 {
		 return -1 ;
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
 800132c:	e067      	b.n	80013fe <_ZN3PMA12PMA_allocateER11EP_Config_S+0x180>
	 }
	 //Allocate
	ep.EP_RX0_Ptr = this->ptr_unalloc ;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	891a      	ldrh	r2, [r3, #8]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	815a      	strh	r2, [r3, #10]
	this->ptr_unalloc  += ( REQsz_rx0/2) ;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	891a      	ldrh	r2, [r3, #8]
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	085b      	lsrs	r3, r3, #1
 800133e:	b29b      	uxth	r3, r3
 8001340:	4413      	add	r3, r2
 8001342:	b29a      	uxth	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	811a      	strh	r2, [r3, #8]
	this->sizew16_free -= ( REQsz_rx0/2) ;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68da      	ldr	r2, [r3, #12]
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	085b      	lsrs	r3, r3, #1
 8001350:	1ad2      	subs	r2, r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	60da      	str	r2, [r3, #12]
	this->sizew16_used += ( REQsz_rx0/2) ;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	691a      	ldr	r2, [r3, #16]
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	085b      	lsrs	r3, r3, #1
 800135e:	441a      	add	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	611a      	str	r2, [r3, #16]

	ep.EP_TX0_Ptr = this->ptr_unalloc ;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	891a      	ldrh	r2, [r3, #8]
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	819a      	strh	r2, [r3, #12]
	this->ptr_unalloc  += ( REQsz_tx0/2) ;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	891a      	ldrh	r2, [r3, #8]
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	085b      	lsrs	r3, r3, #1
 8001374:	b29b      	uxth	r3, r3
 8001376:	4413      	add	r3, r2
 8001378:	b29a      	uxth	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	811a      	strh	r2, [r3, #8]
	this->sizew16_free -= ( REQsz_tx0/2) ;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68da      	ldr	r2, [r3, #12]
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	085b      	lsrs	r3, r3, #1
 8001386:	1ad2      	subs	r2, r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	60da      	str	r2, [r3, #12]
	this->sizew16_used += ( REQsz_tx0/2) ;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691a      	ldr	r2, [r3, #16]
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	085b      	lsrs	r3, r3, #1
 8001394:	441a      	add	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	611a      	str	r2, [r3, #16]


	// write values for the pointers
	// if a buffer is one direction and not double buffered
	// it is allocated a 2 byte padding ,in place of this buffer
	this->write_hw( ep.EP_TX0_Ptr   , ( ep.EP_Num * 8UL) );
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	8999      	ldrh	r1, [r3, #12]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	461a      	mov	r2, r3
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff ff49 	bl	8001242 <_ZN3PMA8write_hwEtt>
	this->write_hw( ep.EP_RX0_Ptr   , ( ep.EP_Num * 8UL + 4UL ) );
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	8959      	ldrh	r1, [r3, #10]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	b29b      	uxth	r3, r3
 80013be:	3304      	adds	r3, #4
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	461a      	mov	r2, r3
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ff3c 	bl	8001242 <_ZN3PMA8write_hwEtt>
	this->write_hw( rx_w , ( ep.EP_Num * 8UL + 6UL ) );
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	3306      	adds	r3, #6
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	8a7b      	ldrh	r3, [r7, #18]
 80013da:	4619      	mov	r1, r3
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ff30 	bl	8001242 <_ZN3PMA8write_hwEtt>

	this->EPs_alloc[(this->eps_allocated)++] = ep.EP_Num ;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	7d1b      	ldrb	r3, [r3, #20]
 80013e6:	1c5a      	adds	r2, r3, #1
 80013e8:	b2d1      	uxtb	r1, r2
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	7511      	strb	r1, [r2, #20]
 80013ee:	461a      	mov	r2, r3
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	6859      	ldr	r1, [r3, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3206      	adds	r2, #6
 80013f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	// done
	return 0 ;
 80013fc:	2300      	movs	r3, #0

}
 80013fe:	4618      	mov	r0, r3
 8001400:	3728      	adds	r7, #40	; 0x28
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <_ZN3PMA8is_allocEl>:

bool PMA::is_alloc( int32_t ep_num )
{
 8001406:	b480      	push	{r7}
 8001408:	b085      	sub	sp, #20
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
 800140e:	6039      	str	r1, [r7, #0]

	for ( int32_t i = 0 ; i < this->eps_allocated ; i++ )
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	7d1b      	ldrb	r3, [r3, #20]
 8001418:	461a      	mov	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4293      	cmp	r3, r2
 800141e:	da0d      	bge.n	800143c <_ZN3PMA8is_allocEl+0x36>
	{
		if ( this->EPs_alloc[i] == ep_num )
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	3206      	adds	r2, #6
 8001426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	429a      	cmp	r2, r3
 800142e:	d101      	bne.n	8001434 <_ZN3PMA8is_allocEl+0x2e>
		{
				return true ;
 8001430:	2301      	movs	r3, #1
 8001432:	e004      	b.n	800143e <_ZN3PMA8is_allocEl+0x38>
	for ( int32_t i = 0 ; i < this->eps_allocated ; i++ )
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	3301      	adds	r3, #1
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	e7eb      	b.n	8001414 <_ZN3PMA8is_allocEl+0xe>
		}
	}
	return false ;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <_ZN11EP_Config_S9setTXStatEPVt9EP_stat_E>:
 *******************************
 ******************************* EP Class Functions **************************/


void EP_Config_S::setTXStat ( volatile uint16_t* ep_reg , EP_stat_E ep_stat )
{
 8001448:	b480      	push	{r7}
 800144a:	b087      	sub	sp, #28
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	4613      	mov	r3, r2
 8001454:	71fb      	strb	r3, [r7, #7]
	uint16_t ep_val = EP_WR_MSK ;
 8001456:	f248 0380 	movw	r3, #32896	; 0x8080
 800145a:	82bb      	strh	r3, [r7, #20]
	uint16_t toggle = ( *(ep_reg) ^ ( ep_stat<< USB_EP0R_STAT_TX_Pos )) & USB_EP0R_STAT_TX_Msk ;
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	b29b      	uxth	r3, r3
 8001462:	b21a      	sxth	r2, r3
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	011b      	lsls	r3, r3, #4
 8001468:	b21b      	sxth	r3, r3
 800146a:	4053      	eors	r3, r2
 800146c:	b21b      	sxth	r3, r3
 800146e:	b29b      	uxth	r3, r3
 8001470:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001474:	82fb      	strh	r3, [r7, #22]

	if ( toggle & ( 1 << USB_EP0R_STAT_TX_Pos ) ){
 8001476:	8afb      	ldrh	r3, [r7, #22]
 8001478:	f003 0310 	and.w	r3, r3, #16
 800147c:	2b00      	cmp	r3, #0
 800147e:	d004      	beq.n	800148a <_ZN11EP_Config_S9setTXStatEPVt9EP_stat_E+0x42>
		ep_val |= ( 1 << USB_EP0R_STAT_TX_Pos );
 8001480:	8abb      	ldrh	r3, [r7, #20]
 8001482:	f043 0310 	orr.w	r3, r3, #16
 8001486:	b29b      	uxth	r3, r3
 8001488:	82bb      	strh	r3, [r7, #20]
	}
	if ( toggle & ( 1 << (USB_EP0R_STAT_TX_Pos+1) ))
 800148a:	8afb      	ldrh	r3, [r7, #22]
 800148c:	f003 0320 	and.w	r3, r3, #32
 8001490:	2b00      	cmp	r3, #0
 8001492:	d004      	beq.n	800149e <_ZN11EP_Config_S9setTXStatEPVt9EP_stat_E+0x56>
	{
		ep_val |= ( 1 << (USB_EP0R_STAT_TX_Pos+1) );
 8001494:	8abb      	ldrh	r3, [r7, #20]
 8001496:	f043 0320 	orr.w	r3, r3, #32
 800149a:	b29b      	uxth	r3, r3
 800149c:	82bb      	strh	r3, [r7, #20]
	}

	*(ep_reg) |= ( ep_val );
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	b299      	uxth	r1, r3
 80014a4:	8aba      	ldrh	r2, [r7, #20]
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	b292      	uxth	r2, r2
 80014ac:	801a      	strh	r2, [r3, #0]

}
 80014ae:	bf00      	nop
 80014b0:	371c      	adds	r7, #28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <_ZN11EP_Config_S9setRXStatEPVt9EP_stat_E>:

void EP_Config_S::setRXStat( volatile uint16_t* ep_reg , EP_stat_E ep_stat )
{
 80014b8:	b480      	push	{r7}
 80014ba:	b087      	sub	sp, #28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	4613      	mov	r3, r2
 80014c4:	71fb      	strb	r3, [r7, #7]

	uint16_t ep_val = EP_WR_MSK ;
 80014c6:	f248 0380 	movw	r3, #32896	; 0x8080
 80014ca:	82bb      	strh	r3, [r7, #20]
	uint16_t toggle = ( *(ep_reg) ^ ( ep_stat<< USB_EP0R_STAT_RX_Pos )) & USB_EP0R_STAT_RX_Msk ;
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	b21a      	sxth	r2, r3
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	031b      	lsls	r3, r3, #12
 80014d8:	b21b      	sxth	r3, r3
 80014da:	4053      	eors	r3, r2
 80014dc:	b21b      	sxth	r3, r3
 80014de:	b29b      	uxth	r3, r3
 80014e0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80014e4:	82fb      	strh	r3, [r7, #22]

	if ( toggle & ( 1 << USB_EP0R_STAT_RX_Pos ) ){
 80014e6:	8afb      	ldrh	r3, [r7, #22]
 80014e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d004      	beq.n	80014fa <_ZN11EP_Config_S9setRXStatEPVt9EP_stat_E+0x42>
		ep_val |= ( 1 << USB_EP0R_STAT_RX_Pos );
 80014f0:	8abb      	ldrh	r3, [r7, #20]
 80014f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	82bb      	strh	r3, [r7, #20]
	}
	if ( toggle & ( 1 << (USB_EP0R_STAT_RX_Pos+1) ))
 80014fa:	8afb      	ldrh	r3, [r7, #22]
 80014fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d004      	beq.n	800150e <_ZN11EP_Config_S9setRXStatEPVt9EP_stat_E+0x56>
	{
		ep_val |= ( 1 << (USB_EP0R_STAT_RX_Pos+1) );
 8001504:	8abb      	ldrh	r3, [r7, #20]
 8001506:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800150a:	b29b      	uxth	r3, r3
 800150c:	82bb      	strh	r3, [r7, #20]
	}

	*(ep_reg) |= ( ep_val );
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	b299      	uxth	r1, r3
 8001514:	8aba      	ldrh	r2, [r7, #20]
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	430a      	orrs	r2, r1
 800151a:	b292      	uxth	r2, r2
 800151c:	801a      	strh	r2, [r3, #0]


}
 800151e:	bf00      	nop
 8001520:	371c      	adds	r7, #28
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <_ZN11EP_Config_S9setRXDTOGEPVtb>:


void EP_Config_S::setRXDTOG ( volatile uint16_t* ep_reg , bool val )
{
 8001528:	b480      	push	{r7}
 800152a:	b087      	sub	sp, #28
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	4613      	mov	r3, r2
 8001534:	71fb      	strb	r3, [r7, #7]
	uint16_t ep_val = EP_WR_MSK ;
 8001536:	f248 0380 	movw	r3, #32896	; 0x8080
 800153a:	82fb      	strh	r3, [r7, #22]
	uint16_t toggle = ( *(ep_reg) ^ ( val << USB_EP0R_DTOG_RX_Pos )) & USB_EP0R_DTOG_RX_Msk ;
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	b29b      	uxth	r3, r3
 8001542:	b21a      	sxth	r2, r3
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	039b      	lsls	r3, r3, #14
 8001548:	b21b      	sxth	r3, r3
 800154a:	4053      	eors	r3, r2
 800154c:	b21b      	sxth	r3, r3
 800154e:	b29b      	uxth	r3, r3
 8001550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001554:	82bb      	strh	r3, [r7, #20]

	if ( toggle & ( 1 << USB_EP0R_DTOG_RX_Pos ))
 8001556:	8abb      	ldrh	r3, [r7, #20]
 8001558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <_ZN11EP_Config_S9setRXDTOGEPVtb+0x40>
	{
		ep_val |= ( 1 << USB_EP0R_DTOG_RX_Pos );
 8001560:	8afb      	ldrh	r3, [r7, #22]
 8001562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001566:	82fb      	strh	r3, [r7, #22]
	}

	*(ep_reg)|= ep_val ;
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	b299      	uxth	r1, r3
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	8afa      	ldrh	r2, [r7, #22]
 8001572:	430a      	orrs	r2, r1
 8001574:	b292      	uxth	r2, r2
 8001576:	801a      	strh	r2, [r3, #0]
}
 8001578:	bf00      	nop
 800157a:	371c      	adds	r7, #28
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr

08001582 <_ZN11EP_Config_S9setTXDTOGEPVtb>:


void EP_Config_S::setTXDTOG ( volatile uint16_t* ep_reg , bool val )
{
 8001582:	b480      	push	{r7}
 8001584:	b087      	sub	sp, #28
 8001586:	af00      	add	r7, sp, #0
 8001588:	60f8      	str	r0, [r7, #12]
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	4613      	mov	r3, r2
 800158e:	71fb      	strb	r3, [r7, #7]

	uint16_t ep_val = EP_WR_MSK ;
 8001590:	f248 0380 	movw	r3, #32896	; 0x8080
 8001594:	82fb      	strh	r3, [r7, #22]
	uint16_t toggle = ( *(ep_reg) ^ ( val << USB_EP0R_DTOG_TX_Pos )) & USB_EP0R_DTOG_TX_Msk ;
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	b29b      	uxth	r3, r3
 800159c:	b21a      	sxth	r2, r3
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	019b      	lsls	r3, r3, #6
 80015a2:	b21b      	sxth	r3, r3
 80015a4:	4053      	eors	r3, r2
 80015a6:	b21b      	sxth	r3, r3
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ae:	82bb      	strh	r3, [r7, #20]

	if ( toggle & ( 1 << USB_EP0R_DTOG_TX_Pos ))
 80015b0:	8abb      	ldrh	r3, [r7, #20]
 80015b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <_ZN11EP_Config_S9setTXDTOGEPVtb+0x40>
	{
		ep_val |= ( 1 << USB_EP0R_DTOG_TX_Pos );
 80015ba:	8afb      	ldrh	r3, [r7, #22]
 80015bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015c0:	82fb      	strh	r3, [r7, #22]
	}

	*(ep_reg)|= ep_val ;
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	b299      	uxth	r1, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	8afa      	ldrh	r2, [r7, #22]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	b292      	uxth	r2, r2
 80015d0:	801a      	strh	r2, [r3, #0]

}
 80015d2:	bf00      	nop
 80015d4:	371c      	adds	r7, #28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <_ZN11EP_Config_SC1Ev>:





EP_Config_S::EP_Config_S ( void ){
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]


	this->EP_TX0_Ptr = 0;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	819a      	strh	r2, [r3, #12]
	this->EP_RX0_Ptr = 0;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	815a      	strh	r2, [r3, #10]
	this->EP_RX0_BSize = 0 ;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	615a      	str	r2, [r3, #20]
	this->EP_RX1_BSize = 0 ;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	61da      	str	r2, [r3, #28]
	this->EP_TX0_BSize = 0 ;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
	this->EP_TX1_BSize = 0 ;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
	this->EP_BT = EP_bufftype_E::EP_SINGLE_BUFF ;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	725a      	strb	r2, [r3, #9]
	this->EP_Type= EP_type_E::EP_TYPE_INT ;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2203      	movs	r2, #3
 8001612:	701a      	strb	r2, [r3, #0]
	this->EP_Dir = EP_dir_E::EP_DIR_BID ;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2202      	movs	r2, #2
 8001618:	705a      	strb	r2, [r3, #1]
	this->EP_Num = 0 ;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	605a      	str	r2, [r3, #4]
	this->alloc  = EP_UNALLOC ;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f04f 32ff 	mov.w	r2, #4294967295
 8001626:	625a      	str	r2, [r3, #36]	; 0x24
	this->EP_Reg = nullptr ;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	621a      	str	r2, [r3, #32]

}
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
	...

0800163c <_ZN11EP_Config_S8allocateEv>:


int32_t EP_Config_S::allocate ( void )
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]

	if ( (this->EP_Dir == EP_dir_E::EP_DIR_BID ) &&
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	785b      	ldrb	r3, [r3, #1]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d116      	bne.n	800167a <_ZN11EP_Config_S8allocateEv+0x3e>
					 ( (this->EP_BT == EP_bufftype_E::EP_SINGLE_BUFF && !this->EP_RX0_BSize)||
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7a5b      	ldrb	r3, [r3, #9]
	if ( (this->EP_Dir == EP_dir_E::EP_DIR_BID ) &&
 8001650:	2b01      	cmp	r3, #1
 8001652:	d103      	bne.n	800165c <_ZN11EP_Config_S8allocateEv+0x20>
					 ( (this->EP_BT == EP_bufftype_E::EP_SINGLE_BUFF && !this->EP_RX0_BSize)||
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00b      	beq.n	8001674 <_ZN11EP_Config_S8allocateEv+0x38>
					   (this->EP_BT == EP_bufftype_E::EP_SINGLE_BUFF && !this->EP_TX0_BSize)||
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	7a5b      	ldrb	r3, [r3, #9]
					 ( (this->EP_BT == EP_bufftype_E::EP_SINGLE_BUFF && !this->EP_RX0_BSize)||
 8001660:	2b01      	cmp	r3, #1
 8001662:	d103      	bne.n	800166c <_ZN11EP_Config_S8allocateEv+0x30>
					   (this->EP_BT == EP_bufftype_E::EP_SINGLE_BUFF && !this->EP_TX0_BSize)||
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <_ZN11EP_Config_S8allocateEv+0x38>
					   (this->EP_BT == EP_bufftype_E::EP_DOUBLE_BUFF))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	7a5b      	ldrb	r3, [r3, #9]
					   (this->EP_BT == EP_bufftype_E::EP_SINGLE_BUFF && !this->EP_TX0_BSize)||
 8001670:	2b00      	cmp	r3, #0
 8001672:	d102      	bne.n	800167a <_ZN11EP_Config_S8allocateEv+0x3e>
					  )
					  {

					return -1 ;
 8001674:	f04f 33ff 	mov.w	r3, #4294967295
 8001678:	e0ca      	b.n	8001810 <_ZN11EP_Config_S8allocateEv+0x1d4>

				}
				else if ( ( this->EP_Dir == EP_dir_E::EP_DIR_OUT ) &&
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	785b      	ldrb	r3, [r3, #1]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d116      	bne.n	80016b0 <_ZN11EP_Config_S8allocateEv+0x74>
						 ((this->EP_BT == EP_bufftype_E::EP_SINGLE_BUFF && !this->EP_RX0_BSize)||
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	7a5b      	ldrb	r3, [r3, #9]
				else if ( ( this->EP_Dir == EP_dir_E::EP_DIR_OUT ) &&
 8001686:	2b01      	cmp	r3, #1
 8001688:	d103      	bne.n	8001692 <_ZN11EP_Config_S8allocateEv+0x56>
						 ((this->EP_BT == EP_bufftype_E::EP_SINGLE_BUFF && !this->EP_RX0_BSize)||
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00b      	beq.n	80016aa <_ZN11EP_Config_S8allocateEv+0x6e>
						  (this->EP_BT == EP_bufftype_E::EP_DOUBLE_BUFF && !( this->EP_RX0_BSize && this->EP_RX1_BSize))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	7a5b      	ldrb	r3, [r3, #9]
						 ((this->EP_BT == EP_bufftype_E::EP_SINGLE_BUFF && !this->EP_RX0_BSize)||
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10a      	bne.n	80016b0 <_ZN11EP_Config_S8allocateEv+0x74>
						  (this->EP_BT == EP_bufftype_E::EP_DOUBLE_BUFF && !( this->EP_RX0_BSize && this->EP_RX1_BSize))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <_ZN11EP_Config_S8allocateEv+0x6e>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d102      	bne.n	80016b0 <_ZN11EP_Config_S8allocateEv+0x74>
						  ))
				{
					return -1 ;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
 80016ae:	e0af      	b.n	8001810 <_ZN11EP_Config_S8allocateEv+0x1d4>
				}
				else if ( (this->EP_Dir == EP_dir_E::EP_DIR_IN ) &&
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	785b      	ldrb	r3, [r3, #1]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d116      	bne.n	80016e6 <_ZN11EP_Config_S8allocateEv+0xaa>
						( (this->EP_BT == EP_bufftype_E::EP_SINGLE_BUFF && !this->EP_TX0_BSize)||
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	7a5b      	ldrb	r3, [r3, #9]
				else if ( (this->EP_Dir == EP_dir_E::EP_DIR_IN ) &&
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d103      	bne.n	80016c8 <_ZN11EP_Config_S8allocateEv+0x8c>
						( (this->EP_BT == EP_bufftype_E::EP_SINGLE_BUFF && !this->EP_TX0_BSize)||
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00b      	beq.n	80016e0 <_ZN11EP_Config_S8allocateEv+0xa4>
						  (this->EP_BT == EP_bufftype_E::EP_DOUBLE_BUFF && !( this->EP_TX0_BSize && this->EP_TX1_BSize))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	7a5b      	ldrb	r3, [r3, #9]
						( (this->EP_BT == EP_bufftype_E::EP_SINGLE_BUFF && !this->EP_TX0_BSize)||
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d10a      	bne.n	80016e6 <_ZN11EP_Config_S8allocateEv+0xaa>
						  (this->EP_BT == EP_bufftype_E::EP_DOUBLE_BUFF && !( this->EP_TX0_BSize && this->EP_TX1_BSize))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <_ZN11EP_Config_S8allocateEv+0xa4>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d102      	bne.n	80016e6 <_ZN11EP_Config_S8allocateEv+0xaa>
							))
				{
						return -1 ;
 80016e0:	f04f 33ff 	mov.w	r3, #4294967295
 80016e4:	e094      	b.n	8001810 <_ZN11EP_Config_S8allocateEv+0x1d4>
				}


	if ( !pma.PMA_allocate( static_cast<EP_Config_S&>(*(this)) )  ){
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	484b      	ldr	r0, [pc, #300]	; (8001818 <_ZN11EP_Config_S8allocateEv+0x1dc>)
 80016ea:	f7ff fdc8 	bl	800127e <_ZN3PMA12PMA_allocateER11EP_Config_S>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	bf0c      	ite	eq
 80016f4:	2301      	moveq	r3, #1
 80016f6:	2300      	movne	r3, #0
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 8086 	beq.w	800180c <_ZN11EP_Config_S8allocateEv+0x1d0>
		//allocation successful
		volatile uint16_t * ep_reg = this->getEPReg();
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 f8e5 	bl	80018d0 <_ZN11EP_Config_S8getEPRegEv>
 8001706:	4603      	mov	r3, r0
 8001708:	60bb      	str	r3, [r7, #8]

		uint16_t ep_val = EP_WR_MSK ;
 800170a:	f248 0380 	movw	r3, #32896	; 0x8080
 800170e:	81fb      	strh	r3, [r7, #14]
		//EP TYPE
		ep_val|= ( this->EP_Type << USB_EP0R_EP_TYPE_Pos ) ;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	025b      	lsls	r3, r3, #9
 8001716:	b21a      	sxth	r2, r3
 8001718:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800171c:	4313      	orrs	r3, r2
 800171e:	b21b      	sxth	r3, r3
 8001720:	81fb      	strh	r3, [r7, #14]
		//EP BUFF TYPE
		ep_val|= ( ( this->EP_Dir == EP_dir_E::EP_DIR_BID ? (1UL) : (0UL)) << USB_EP0R_EP_KIND_Pos );
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	785b      	ldrb	r3, [r3, #1]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d102      	bne.n	8001730 <_ZN11EP_Config_S8allocateEv+0xf4>
 800172a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800172e:	e000      	b.n	8001732 <_ZN11EP_Config_S8allocateEv+0xf6>
 8001730:	2200      	movs	r2, #0
 8001732:	89fb      	ldrh	r3, [r7, #14]
 8001734:	4313      	orrs	r3, r2
 8001736:	81fb      	strh	r3, [r7, #14]
		//EP Address
		ep_val|= ( this->EP_Addr << USB_EP0R_EA_Pos );
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	7a1b      	ldrb	r3, [r3, #8]
 800173c:	b29a      	uxth	r2, r3
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	4313      	orrs	r3, r2
 8001742:	81fb      	strh	r3, [r7, #14]
		*(ep_reg) = ep_val ;
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	89fa      	ldrh	r2, [r7, #14]
 8001748:	801a      	strh	r2, [r3, #0]
		//Init DTOG

		if ( this->EP_Type == EP_type_E::EP_TYPE_CONTROL )
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d10c      	bne.n	800176c <_ZN11EP_Config_S8allocateEv+0x130>
		{
			setTXDTOG( ep_reg , false );
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	2200      	movs	r2, #0
 8001756:	4619      	mov	r1, r3
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff ff12 	bl	8001582 <_ZN11EP_Config_S9setTXDTOGEPVtb>
			setRXDTOG( ep_reg , true );
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	2201      	movs	r2, #1
 8001762:	4619      	mov	r1, r3
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff fedf 	bl	8001528 <_ZN11EP_Config_S9setRXDTOGEPVtb>
 800176a:	e00b      	b.n	8001784 <_ZN11EP_Config_S8allocateEv+0x148>
		}
		else{
			setTXDTOG(ep_reg , false );
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	2200      	movs	r2, #0
 8001770:	4619      	mov	r1, r3
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff ff05 	bl	8001582 <_ZN11EP_Config_S9setTXDTOGEPVtb>
			setRXDTOG(ep_reg , false );
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2200      	movs	r2, #0
 800177c:	4619      	mov	r1, r3
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff fed2 	bl	8001528 <_ZN11EP_Config_S9setRXDTOGEPVtb>
		}

		//Init STAT
		if ( this->EP_Dir == EP_dir_E::EP_DIR_IN )
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	785b      	ldrb	r3, [r3, #1]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10c      	bne.n	80017a6 <_ZN11EP_Config_S8allocateEv+0x16a>
		{
			setRXStat( ep_reg , EP_stat_E::EP_DISABLED);
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	2200      	movs	r2, #0
 8001790:	4619      	mov	r1, r3
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff fe90 	bl	80014b8 <_ZN11EP_Config_S9setRXStatEPVt9EP_stat_E>
			setTXStat( ep_reg , EP_stat_E::EP_STALL ) ;
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	2201      	movs	r2, #1
 800179c:	4619      	mov	r1, r3
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff fe52 	bl	8001448 <_ZN11EP_Config_S9setTXStatEPVt9EP_stat_E>
 80017a4:	e030      	b.n	8001808 <_ZN11EP_Config_S8allocateEv+0x1cc>
		}
		else if ( this->EP_Dir == EP_dir_E::EP_DIR_OUT )
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	785b      	ldrb	r3, [r3, #1]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d10c      	bne.n	80017c8 <_ZN11EP_Config_S8allocateEv+0x18c>
		{
			setRXStat( ep_reg , EP_stat_E::EP_STALL);
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	2201      	movs	r2, #1
 80017b2:	4619      	mov	r1, r3
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff fe7f 	bl	80014b8 <_ZN11EP_Config_S9setRXStatEPVt9EP_stat_E>
			setTXStat( ep_reg , EP_stat_E::EP_DISABLED ) ;
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	2200      	movs	r2, #0
 80017be:	4619      	mov	r1, r3
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff fe41 	bl	8001448 <_ZN11EP_Config_S9setTXStatEPVt9EP_stat_E>
 80017c6:	e01f      	b.n	8001808 <_ZN11EP_Config_S8allocateEv+0x1cc>

		}
		else if ( this -> EP_Dir == EP_dir_E::EP_DIR_BID )
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	785b      	ldrb	r3, [r3, #1]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d10c      	bne.n	80017ea <_ZN11EP_Config_S8allocateEv+0x1ae>
		{
			setRXStat( ep_reg , EP_stat_E::EP_STALL);
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2201      	movs	r2, #1
 80017d4:	4619      	mov	r1, r3
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff fe6e 	bl	80014b8 <_ZN11EP_Config_S9setRXStatEPVt9EP_stat_E>
			setTXStat( ep_reg , EP_stat_E::EP_STALL ) ;
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	2201      	movs	r2, #1
 80017e0:	4619      	mov	r1, r3
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff fe30 	bl	8001448 <_ZN11EP_Config_S9setTXStatEPVt9EP_stat_E>
 80017e8:	e00e      	b.n	8001808 <_ZN11EP_Config_S8allocateEv+0x1cc>
		}
		else{

			setRXStat( ep_reg , EP_stat_E::EP_DISABLED);
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	2200      	movs	r2, #0
 80017ee:	4619      	mov	r1, r3
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff fe61 	bl	80014b8 <_ZN11EP_Config_S9setRXStatEPVt9EP_stat_E>
			setTXStat( ep_reg , EP_stat_E::EP_DISABLED ) ;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	2200      	movs	r2, #0
 80017fa:	4619      	mov	r1, r3
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff fe23 	bl	8001448 <_ZN11EP_Config_S9setTXStatEPVt9EP_stat_E>
			return -1 ;
 8001802:	f04f 33ff 	mov.w	r3, #4294967295
 8001806:	e003      	b.n	8001810 <_ZN11EP_Config_S8allocateEv+0x1d4>


		}
		return 0 ;
 8001808:	2300      	movs	r3, #0
 800180a:	e001      	b.n	8001810 <_ZN11EP_Config_S8allocateEv+0x1d4>

	}


	return -1 ;
 800180c:	f04f 33ff 	mov.w	r3, #4294967295

}
 8001810:	4618      	mov	r0, r3
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000028 	.word	0x20000028

0800181c <_ZN11EP_Config_S11writeTXBuffEPht>:



int32_t EP_Config_S::writeTXBuff ( uint8_t* d_ptr , uint16_t d_len  )
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	4613      	mov	r3, r2
 8001828:	80fb      	strh	r3, [r7, #6]
	uint16_t td_len = d_len ;
 800182a:	88fb      	ldrh	r3, [r7, #6]
 800182c:	83fb      	strh	r3, [r7, #30]
	if ( d_len %2 )
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b00      	cmp	r3, #0
 8001836:	d002      	beq.n	800183e <_ZN11EP_Config_S11writeTXBuffEPht+0x22>
	{
		td_len++;
 8001838:	8bfb      	ldrh	r3, [r7, #30]
 800183a:	3301      	adds	r3, #1
 800183c:	83fb      	strh	r3, [r7, #30]
	}
	//check if ep is allocated and initialized
	if ( !pma.is_alloc( this->EP_Num ) || d_len > this->EP_TX0_BSize )
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	4619      	mov	r1, r3
 8001844:	4821      	ldr	r0, [pc, #132]	; (80018cc <_ZN11EP_Config_S11writeTXBuffEPht+0xb0>)
 8001846:	f7ff fdde 	bl	8001406 <_ZN3PMA8is_allocEl>
 800184a:	4603      	mov	r3, r0
 800184c:	f083 0301 	eor.w	r3, r3, #1
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d104      	bne.n	8001860 <_ZN11EP_Config_S11writeTXBuffEPht+0x44>
 8001856:	88fa      	ldrh	r2, [r7, #6]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	429a      	cmp	r2, r3
 800185e:	d901      	bls.n	8001864 <_ZN11EP_Config_S11writeTXBuffEPht+0x48>
 8001860:	2301      	movs	r3, #1
 8001862:	e000      	b.n	8001866 <_ZN11EP_Config_S11writeTXBuffEPht+0x4a>
 8001864:	2300      	movs	r3, #0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d002      	beq.n	8001870 <_ZN11EP_Config_S11writeTXBuffEPht+0x54>
	{
		return -1 ;
 800186a:	f04f 33ff 	mov.w	r3, #4294967295
 800186e:	e028      	b.n	80018c2 <_ZN11EP_Config_S11writeTXBuffEPht+0xa6>
	}

	for( int32_t i = 0 ; td_len ; td_len-=2 , i+=2 )
 8001870:	2300      	movs	r3, #0
 8001872:	61bb      	str	r3, [r7, #24]
 8001874:	8bfb      	ldrh	r3, [r7, #30]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d016      	beq.n	80018a8 <_ZN11EP_Config_S11writeTXBuffEPht+0x8c>
	{
		uint16_t val  = *( (uint16_t*)(d_ptr+i) );
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	68ba      	ldr	r2, [r7, #8]
 800187e:	4413      	add	r3, r2
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	82fb      	strh	r3, [r7, #22]
		pma.write_hw( val , this->EP_TX0_Ptr + i );
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	899a      	ldrh	r2, [r3, #12]
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	b29b      	uxth	r3, r3
 800188c:	4413      	add	r3, r2
 800188e:	b29a      	uxth	r2, r3
 8001890:	8afb      	ldrh	r3, [r7, #22]
 8001892:	4619      	mov	r1, r3
 8001894:	480d      	ldr	r0, [pc, #52]	; (80018cc <_ZN11EP_Config_S11writeTXBuffEPht+0xb0>)
 8001896:	f7ff fcd4 	bl	8001242 <_ZN3PMA8write_hwEtt>
	for( int32_t i = 0 ; td_len ; td_len-=2 , i+=2 )
 800189a:	8bfb      	ldrh	r3, [r7, #30]
 800189c:	3b02      	subs	r3, #2
 800189e:	83fb      	strh	r3, [r7, #30]
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	3302      	adds	r3, #2
 80018a4:	61bb      	str	r3, [r7, #24]
 80018a6:	e7e5      	b.n	8001874 <_ZN11EP_Config_S11writeTXBuffEPht+0x58>
	}

	pma.write_hw(  d_len  , this->EP_Num * 8UL + 2UL ) ;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	3302      	adds	r3, #2
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	88fb      	ldrh	r3, [r7, #6]
 80018b8:	4619      	mov	r1, r3
 80018ba:	4804      	ldr	r0, [pc, #16]	; (80018cc <_ZN11EP_Config_S11writeTXBuffEPht+0xb0>)
 80018bc:	f7ff fcc1 	bl	8001242 <_ZN3PMA8write_hwEtt>

	return 0 ;
 80018c0:	2300      	movs	r3, #0


}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3720      	adds	r7, #32
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000028 	.word	0x20000028

080018d0 <_ZN11EP_Config_S8getEPRegEv>:

}


volatile uint16_t* EP_Config_S::getEPReg( void )
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	return (((volatile uint16_t*)(&(USB->EP0R) )) + this->EP_Num );
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80018e0:	f503 5338 	add.w	r3, r3, #11776	; 0x2e00
 80018e4:	005b      	lsls	r3, r3, #1

}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <_Z41__static_initialization_and_destruction_0ii>:
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d107      	bne.n	8001910 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001906:	4293      	cmp	r3, r2
 8001908:	d102      	bne.n	8001910 <_Z41__static_initialization_and_destruction_0ii+0x20>
PMA pma ;
 800190a:	4803      	ldr	r0, [pc, #12]	; (8001918 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800190c:	f7ff fc50 	bl	80011b0 <_ZN3PMAC1Ev>
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000028 	.word	0x20000028

0800191c <_GLOBAL__sub_I_pma>:
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
 8001920:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001924:	2001      	movs	r0, #1
 8001926:	f7ff ffe3 	bl	80018f0 <_Z41__static_initialization_and_destruction_0ii>
 800192a:	bd80      	pop	{r7, pc}

0800192c <__libc_init_array>:
 800192c:	b570      	push	{r4, r5, r6, lr}
 800192e:	2500      	movs	r5, #0
 8001930:	4e0c      	ldr	r6, [pc, #48]	; (8001964 <__libc_init_array+0x38>)
 8001932:	4c0d      	ldr	r4, [pc, #52]	; (8001968 <__libc_init_array+0x3c>)
 8001934:	1ba4      	subs	r4, r4, r6
 8001936:	10a4      	asrs	r4, r4, #2
 8001938:	42a5      	cmp	r5, r4
 800193a:	d109      	bne.n	8001950 <__libc_init_array+0x24>
 800193c:	f000 f822 	bl	8001984 <_init>
 8001940:	2500      	movs	r5, #0
 8001942:	4e0a      	ldr	r6, [pc, #40]	; (800196c <__libc_init_array+0x40>)
 8001944:	4c0a      	ldr	r4, [pc, #40]	; (8001970 <__libc_init_array+0x44>)
 8001946:	1ba4      	subs	r4, r4, r6
 8001948:	10a4      	asrs	r4, r4, #2
 800194a:	42a5      	cmp	r5, r4
 800194c:	d105      	bne.n	800195a <__libc_init_array+0x2e>
 800194e:	bd70      	pop	{r4, r5, r6, pc}
 8001950:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001954:	4798      	blx	r3
 8001956:	3501      	adds	r5, #1
 8001958:	e7ee      	b.n	8001938 <__libc_init_array+0xc>
 800195a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800195e:	4798      	blx	r3
 8001960:	3501      	adds	r5, #1
 8001962:	e7f2      	b.n	800194a <__libc_init_array+0x1e>
 8001964:	080019ac 	.word	0x080019ac
 8001968:	080019ac 	.word	0x080019ac
 800196c:	080019ac 	.word	0x080019ac
 8001970:	080019b8 	.word	0x080019b8

08001974 <memset>:
 8001974:	4603      	mov	r3, r0
 8001976:	4402      	add	r2, r0
 8001978:	4293      	cmp	r3, r2
 800197a:	d100      	bne.n	800197e <memset+0xa>
 800197c:	4770      	bx	lr
 800197e:	f803 1b01 	strb.w	r1, [r3], #1
 8001982:	e7f9      	b.n	8001978 <memset+0x4>

08001984 <_init>:
 8001984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001986:	bf00      	nop
 8001988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800198a:	bc08      	pop	{r3}
 800198c:	469e      	mov	lr, r3
 800198e:	4770      	bx	lr

08001990 <_fini>:
 8001990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001992:	bf00      	nop
 8001994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001996:	bc08      	pop	{r3}
 8001998:	469e      	mov	lr, r3
 800199a:	4770      	bx	lr
